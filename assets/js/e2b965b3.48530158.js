(self.webpackChunk_graphql_tools_website=self.webpackChunk_graphql_tools_website||[]).push([[9643],{5318:function(e,t,a){"use strict";a.d(t,{Zo:function(){return k},kt:function(){return N}});var n=a(7378);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function p(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?p(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):p(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},p=Object.keys(e);for(n=0;n<p.length;n++)a=p[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var p=Object.getOwnPropertySymbols(e);for(n=0;n<p.length;n++)a=p[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var d=n.createContext({}),m=function(e){var t=n.useContext(d),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},k=function(e){var t=m(e.components);return n.createElement(d.Provider,{value:t},e.children)},o={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},s=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,p=e.originalType,d=e.parentName,k=l(e,["components","mdxType","originalType","parentName"]),s=m(a),N=r,c=s["".concat(d,".").concat(N)]||s[N]||o[N]||p;return a?n.createElement(c,i(i({ref:t},k),{},{components:a})):n.createElement(c,i({ref:t},k))}));function N(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var p=a.length,i=new Array(p);i[0]=s;var l={};for(var d in t)hasOwnProperty.call(t,d)&&(l[d]=t[d]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var m=2;m<p;m++)i[m]=a[m];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}s.displayName="MDXCreateElement"},7272:function(e,t,a){"use strict";a.r(t),a.d(t,{frontMatter:function(){return l},metadata:function(){return d},toc:function(){return m},default:function(){return o}});var n=a(9603),r=a(120),p=(a(7378),a(5318)),i=["components"],l={},d={unversionedId:"api/interfaces/mock_src.imockstore",id:"api/interfaces/mock_src.imockstore",isDocsHomePage:!1,title:"Interface: IMockStore",description:"mock/src.IMockStore",source:"@site/docs/api/interfaces/mock_src.imockstore.md",sourceDirName:"api/interfaces",slug:"/api/interfaces/mock_src.imockstore",permalink:"/docs/api/interfaces/mock_src.imockstore",editUrl:"https://github.com/ardatan/graphql-tools/edit/master/website/docs/api/interfaces/mock_src.imockstore.md",version:"current",frontMatter:{},sidebar:"someSidebar",previous:{title:"Interface: IMockServer",permalink:"/docs/api/interfaces/mock_src.imockserver"},next:{title:"Interface: IResolverValidationOptions",permalink:"/docs/api/interfaces/utils_src.iresolvervalidationoptions"}},m=[{value:"Implemented by",id:"implemented-by",children:[]},{value:"Table of contents",id:"table-of-contents",children:[{value:"Properties",id:"properties",children:[]},{value:"Methods",id:"methods",children:[]}]},{value:"Properties",id:"properties-1",children:[{value:"schema",id:"schema",children:[]}]},{value:"Methods",id:"methods-1",children:[{value:"get",id:"get",children:[]},{value:"reset",id:"reset",children:[]},{value:"set",id:"set",children:[]}]}],k={toc:m};function o(e){var t=e.components,a=(0,r.Z)(e,i);return(0,p.kt)("wrapper",(0,n.Z)({},k,a,{components:t,mdxType:"MDXLayout"}),(0,p.kt)("p",null,(0,p.kt)("a",{parentName:"p",href:"../modules/mock_src"},"mock/src"),".IMockStore"),(0,p.kt)("h2",{id:"implemented-by"},"Implemented by"),(0,p.kt)("ul",null,(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("a",{parentName:"li",href:"/docs/api/classes/mock_src.mockstore"},"MockStore"))),(0,p.kt)("h2",{id:"table-of-contents"},"Table of contents"),(0,p.kt)("h3",{id:"properties"},"Properties"),(0,p.kt)("ul",null,(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("a",{parentName:"li",href:"/docs/api/interfaces/mock_src.imockstore#schema"},"schema"))),(0,p.kt)("h3",{id:"methods"},"Methods"),(0,p.kt)("ul",null,(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("a",{parentName:"li",href:"/docs/api/interfaces/mock_src.imockstore#get"},"get")),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("a",{parentName:"li",href:"/docs/api/interfaces/mock_src.imockstore#reset"},"reset")),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("a",{parentName:"li",href:"/docs/api/interfaces/mock_src.imockstore#set"},"set"))),(0,p.kt)("h2",{id:"properties-1"},"Properties"),(0,p.kt)("h3",{id:"schema"},"schema"),(0,p.kt)("p",null,"\u2022 ",(0,p.kt)("strong",{parentName:"p"},"schema"),": ",(0,p.kt)("inlineCode",{parentName:"p"},"GraphQLSchema")),(0,p.kt)("h4",{id:"defined-in"},"Defined in"),(0,p.kt)("p",null,(0,p.kt)("a",{parentName:"p",href:"https://github.com/ardatan/graphql-tools/blob/master/packages/mock/src/types.ts#L69"},"packages/mock/src/types.ts:69")),(0,p.kt)("h2",{id:"methods-1"},"Methods"),(0,p.kt)("h3",{id:"get"},"get"),(0,p.kt)("p",null,"\u25b8 ",(0,p.kt)("strong",{parentName:"p"},"get"),"<","KeyT, ReturnKeyT\\",">","(",(0,p.kt)("inlineCode",{parentName:"p"},"args"),"): ",(0,p.kt)("inlineCode",{parentName:"p"},"unknown")),(0,p.kt)("p",null,"Get a field value from the store for the given type, key and field\nname \u2014 and optionally field arguments. If the field name is not given,\na reference to the type will be returned."),(0,p.kt)("p",null,"If the the value for this field is not set, a value will be\ngenerated according to field return type and mock functions."),(0,p.kt)("p",null,"If the field's output type is a ",(0,p.kt)("inlineCode",{parentName:"p"},"ObjectType")," (or list of ",(0,p.kt)("inlineCode",{parentName:"p"},"ObjectType"),"),\nit will return a ",(0,p.kt)("inlineCode",{parentName:"p"},"Ref")," (or array of ",(0,p.kt)("inlineCode",{parentName:"p"},"Ref"),"), ie a reference to an entity\nin the store."),(0,p.kt)("p",null,"Example:"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-ts"},"store.get('Query', 'ROOT', 'viewer');\n&gt; { $ref: { key: 'abc-737dh-djdjd', typeName: 'User' } }\nstore.get('User', 'abc-737dh-djdjd', 'name')\n&gt; \"Hello World\"\n")),(0,p.kt)("h4",{id:"type-parameters"},"Type parameters"),(0,p.kt)("table",null,(0,p.kt)("thead",{parentName:"table"},(0,p.kt)("tr",{parentName:"thead"},(0,p.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,p.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,p.kt)("tbody",{parentName:"table"},(0,p.kt)("tr",{parentName:"tbody"},(0,p.kt)("td",{parentName:"tr",align:"left"},(0,p.kt)("inlineCode",{parentName:"td"},"KeyT")),(0,p.kt)("td",{parentName:"tr",align:"left"},(0,p.kt)("inlineCode",{parentName:"td"},"KeyT"),": ",(0,p.kt)("a",{parentName:"td",href:"/docs/api/modules/mock#keytypeconstraints"},"KeyTypeConstraints")," = ",(0,p.kt)("inlineCode",{parentName:"td"},"string"))),(0,p.kt)("tr",{parentName:"tbody"},(0,p.kt)("td",{parentName:"tr",align:"left"},(0,p.kt)("inlineCode",{parentName:"td"},"ReturnKeyT")),(0,p.kt)("td",{parentName:"tr",align:"left"},(0,p.kt)("inlineCode",{parentName:"td"},"ReturnKeyT"),": ",(0,p.kt)("a",{parentName:"td",href:"/docs/api/modules/mock#keytypeconstraints"},"KeyTypeConstraints")," = ",(0,p.kt)("inlineCode",{parentName:"td"},"string"))))),(0,p.kt)("h4",{id:"parameters"},"Parameters"),(0,p.kt)("table",null,(0,p.kt)("thead",{parentName:"table"},(0,p.kt)("tr",{parentName:"thead"},(0,p.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,p.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,p.kt)("tbody",{parentName:"table"},(0,p.kt)("tr",{parentName:"tbody"},(0,p.kt)("td",{parentName:"tr",align:"left"},(0,p.kt)("inlineCode",{parentName:"td"},"args")),(0,p.kt)("td",{parentName:"tr",align:"left"},(0,p.kt)("a",{parentName:"td",href:"/docs/api/modules/mock#getargs"},"GetArgs"),"<","KeyT\\",">")))),(0,p.kt)("h4",{id:"returns"},"Returns"),(0,p.kt)("p",null,(0,p.kt)("inlineCode",{parentName:"p"},"unknown")),(0,p.kt)("h4",{id:"defined-in-1"},"Defined in"),(0,p.kt)("p",null,(0,p.kt)("a",{parentName:"p",href:"https://github.com/ardatan/graphql-tools/blob/master/packages/mock/src/types.ts#L90"},"packages/mock/src/types.ts:90")),(0,p.kt)("p",null,"\u25b8 ",(0,p.kt)("strong",{parentName:"p"},"get"),"<","KeyT, ReturnKeyT\\",">","(",(0,p.kt)("inlineCode",{parentName:"p"},"typeName"),", ",(0,p.kt)("inlineCode",{parentName:"p"},"key"),", ",(0,p.kt)("inlineCode",{parentName:"p"},"fieldNameOrFieldNames"),", ",(0,p.kt)("inlineCode",{parentName:"p"},"fieldArgs?"),"): ",(0,p.kt)("inlineCode",{parentName:"p"},"unknown")),(0,p.kt)("p",null,"Shorthand for ",(0,p.kt)("inlineCode",{parentName:"p"},"get({typeName, key, fieldName, fieldArgs})"),"."),(0,p.kt)("h4",{id:"type-parameters-1"},"Type parameters"),(0,p.kt)("table",null,(0,p.kt)("thead",{parentName:"table"},(0,p.kt)("tr",{parentName:"thead"},(0,p.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,p.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,p.kt)("tbody",{parentName:"table"},(0,p.kt)("tr",{parentName:"tbody"},(0,p.kt)("td",{parentName:"tr",align:"left"},(0,p.kt)("inlineCode",{parentName:"td"},"KeyT")),(0,p.kt)("td",{parentName:"tr",align:"left"},(0,p.kt)("inlineCode",{parentName:"td"},"KeyT"),": ",(0,p.kt)("a",{parentName:"td",href:"/docs/api/modules/mock#keytypeconstraints"},"KeyTypeConstraints")," = ",(0,p.kt)("inlineCode",{parentName:"td"},"string"))),(0,p.kt)("tr",{parentName:"tbody"},(0,p.kt)("td",{parentName:"tr",align:"left"},(0,p.kt)("inlineCode",{parentName:"td"},"ReturnKeyT")),(0,p.kt)("td",{parentName:"tr",align:"left"},(0,p.kt)("inlineCode",{parentName:"td"},"ReturnKeyT"),": ",(0,p.kt)("a",{parentName:"td",href:"/docs/api/modules/mock#keytypeconstraints"},"KeyTypeConstraints")," = ",(0,p.kt)("inlineCode",{parentName:"td"},"string"))))),(0,p.kt)("h4",{id:"parameters-1"},"Parameters"),(0,p.kt)("table",null,(0,p.kt)("thead",{parentName:"table"},(0,p.kt)("tr",{parentName:"thead"},(0,p.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,p.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,p.kt)("tbody",{parentName:"table"},(0,p.kt)("tr",{parentName:"tbody"},(0,p.kt)("td",{parentName:"tr",align:"left"},(0,p.kt)("inlineCode",{parentName:"td"},"typeName")),(0,p.kt)("td",{parentName:"tr",align:"left"},(0,p.kt)("inlineCode",{parentName:"td"},"string"))),(0,p.kt)("tr",{parentName:"tbody"},(0,p.kt)("td",{parentName:"tr",align:"left"},(0,p.kt)("inlineCode",{parentName:"td"},"key")),(0,p.kt)("td",{parentName:"tr",align:"left"},(0,p.kt)("inlineCode",{parentName:"td"},"KeyT"))),(0,p.kt)("tr",{parentName:"tbody"},(0,p.kt)("td",{parentName:"tr",align:"left"},(0,p.kt)("inlineCode",{parentName:"td"},"fieldNameOrFieldNames")),(0,p.kt)("td",{parentName:"tr",align:"left"},(0,p.kt)("inlineCode",{parentName:"td"},"string")," ","|"," ",(0,p.kt)("inlineCode",{parentName:"td"},"string"),"[]")),(0,p.kt)("tr",{parentName:"tbody"},(0,p.kt)("td",{parentName:"tr",align:"left"},(0,p.kt)("inlineCode",{parentName:"td"},"fieldArgs?")),(0,p.kt)("td",{parentName:"tr",align:"left"},(0,p.kt)("inlineCode",{parentName:"td"},"string")," ","|"," { ","[argName: string]",": ",(0,p.kt)("inlineCode",{parentName:"td"},"any"),";  }")))),(0,p.kt)("h4",{id:"returns-1"},"Returns"),(0,p.kt)("p",null,(0,p.kt)("inlineCode",{parentName:"p"},"unknown")),(0,p.kt)("h4",{id:"defined-in-2"},"Defined in"),(0,p.kt)("p",null,(0,p.kt)("a",{parentName:"p",href:"https://github.com/ardatan/graphql-tools/blob/master/packages/mock/src/types.ts#L96"},"packages/mock/src/types.ts:96")),(0,p.kt)("p",null,"\u25b8 ",(0,p.kt)("strong",{parentName:"p"},"get"),"<","KeyT\\",">","(",(0,p.kt)("inlineCode",{parentName:"p"},"typeName"),", ",(0,p.kt)("inlineCode",{parentName:"p"},"keyOrDefaultValue?"),", ",(0,p.kt)("inlineCode",{parentName:"p"},"defaultValue?"),"): ",(0,p.kt)("inlineCode",{parentName:"p"},"unknown")),(0,p.kt)("p",null,"Get a reference to the type."),(0,p.kt)("h4",{id:"type-parameters-2"},"Type parameters"),(0,p.kt)("table",null,(0,p.kt)("thead",{parentName:"table"},(0,p.kt)("tr",{parentName:"thead"},(0,p.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,p.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,p.kt)("tbody",{parentName:"table"},(0,p.kt)("tr",{parentName:"tbody"},(0,p.kt)("td",{parentName:"tr",align:"left"},(0,p.kt)("inlineCode",{parentName:"td"},"KeyT")),(0,p.kt)("td",{parentName:"tr",align:"left"},(0,p.kt)("inlineCode",{parentName:"td"},"KeyT"),": ",(0,p.kt)("a",{parentName:"td",href:"/docs/api/modules/mock#keytypeconstraints"},"KeyTypeConstraints")," = ",(0,p.kt)("inlineCode",{parentName:"td"},"string"))))),(0,p.kt)("h4",{id:"parameters-2"},"Parameters"),(0,p.kt)("table",null,(0,p.kt)("thead",{parentName:"table"},(0,p.kt)("tr",{parentName:"thead"},(0,p.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,p.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,p.kt)("tbody",{parentName:"table"},(0,p.kt)("tr",{parentName:"tbody"},(0,p.kt)("td",{parentName:"tr",align:"left"},(0,p.kt)("inlineCode",{parentName:"td"},"typeName")),(0,p.kt)("td",{parentName:"tr",align:"left"},(0,p.kt)("inlineCode",{parentName:"td"},"string"))),(0,p.kt)("tr",{parentName:"tbody"},(0,p.kt)("td",{parentName:"tr",align:"left"},(0,p.kt)("inlineCode",{parentName:"td"},"keyOrDefaultValue?")),(0,p.kt)("td",{parentName:"tr",align:"left"},(0,p.kt)("inlineCode",{parentName:"td"},"KeyT")," ","|"," { ","[fieldName: string]",": ",(0,p.kt)("inlineCode",{parentName:"td"},"any"),";  }")),(0,p.kt)("tr",{parentName:"tbody"},(0,p.kt)("td",{parentName:"tr",align:"left"},(0,p.kt)("inlineCode",{parentName:"td"},"defaultValue?")),(0,p.kt)("td",{parentName:"tr",align:"left"},(0,p.kt)("inlineCode",{parentName:"td"},"Object"))))),(0,p.kt)("h4",{id:"returns-2"},"Returns"),(0,p.kt)("p",null,(0,p.kt)("inlineCode",{parentName:"p"},"unknown")),(0,p.kt)("h4",{id:"defined-in-3"},"Defined in"),(0,p.kt)("p",null,(0,p.kt)("a",{parentName:"p",href:"https://github.com/ardatan/graphql-tools/blob/master/packages/mock/src/types.ts#L105"},"packages/mock/src/types.ts:105")),(0,p.kt)("p",null,"\u25b8 ",(0,p.kt)("strong",{parentName:"p"},"get"),"<","KeyT, ReturnKeyT\\",">","(",(0,p.kt)("inlineCode",{parentName:"p"},"ref"),", ",(0,p.kt)("inlineCode",{parentName:"p"},"fieldNameOrFieldNames"),", ",(0,p.kt)("inlineCode",{parentName:"p"},"fieldArgs?"),"): ",(0,p.kt)("inlineCode",{parentName:"p"},"unknown")),(0,p.kt)("p",null,"Shorthand for ",(0,p.kt)("inlineCode",{parentName:"p"},"get({typeName: ref.$ref.typeName, key: ref.$ref.key, fieldName, fieldArgs})")),(0,p.kt)("h4",{id:"type-parameters-3"},"Type parameters"),(0,p.kt)("table",null,(0,p.kt)("thead",{parentName:"table"},(0,p.kt)("tr",{parentName:"thead"},(0,p.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,p.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,p.kt)("tbody",{parentName:"table"},(0,p.kt)("tr",{parentName:"tbody"},(0,p.kt)("td",{parentName:"tr",align:"left"},(0,p.kt)("inlineCode",{parentName:"td"},"KeyT")),(0,p.kt)("td",{parentName:"tr",align:"left"},(0,p.kt)("inlineCode",{parentName:"td"},"KeyT"),": ",(0,p.kt)("a",{parentName:"td",href:"/docs/api/modules/mock#keytypeconstraints"},"KeyTypeConstraints")," = ",(0,p.kt)("inlineCode",{parentName:"td"},"string"))),(0,p.kt)("tr",{parentName:"tbody"},(0,p.kt)("td",{parentName:"tr",align:"left"},(0,p.kt)("inlineCode",{parentName:"td"},"ReturnKeyT")),(0,p.kt)("td",{parentName:"tr",align:"left"},(0,p.kt)("inlineCode",{parentName:"td"},"ReturnKeyT"),": ",(0,p.kt)("a",{parentName:"td",href:"/docs/api/modules/mock#keytypeconstraints"},"KeyTypeConstraints")," = ",(0,p.kt)("inlineCode",{parentName:"td"},"string"))))),(0,p.kt)("h4",{id:"parameters-3"},"Parameters"),(0,p.kt)("table",null,(0,p.kt)("thead",{parentName:"table"},(0,p.kt)("tr",{parentName:"thead"},(0,p.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,p.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,p.kt)("tbody",{parentName:"table"},(0,p.kt)("tr",{parentName:"tbody"},(0,p.kt)("td",{parentName:"tr",align:"left"},(0,p.kt)("inlineCode",{parentName:"td"},"ref")),(0,p.kt)("td",{parentName:"tr",align:"left"},(0,p.kt)("a",{parentName:"td",href:"/docs/api/modules/mock#ref"},"Ref"),"<","KeyT\\",">")),(0,p.kt)("tr",{parentName:"tbody"},(0,p.kt)("td",{parentName:"tr",align:"left"},(0,p.kt)("inlineCode",{parentName:"td"},"fieldNameOrFieldNames")),(0,p.kt)("td",{parentName:"tr",align:"left"},(0,p.kt)("inlineCode",{parentName:"td"},"string")," ","|"," ",(0,p.kt)("inlineCode",{parentName:"td"},"string"),"[]")),(0,p.kt)("tr",{parentName:"tbody"},(0,p.kt)("td",{parentName:"tr",align:"left"},(0,p.kt)("inlineCode",{parentName:"td"},"fieldArgs?")),(0,p.kt)("td",{parentName:"tr",align:"left"},(0,p.kt)("inlineCode",{parentName:"td"},"string")," ","|"," { ","[argName: string]",": ",(0,p.kt)("inlineCode",{parentName:"td"},"any"),";  }")))),(0,p.kt)("h4",{id:"returns-3"},"Returns"),(0,p.kt)("p",null,(0,p.kt)("inlineCode",{parentName:"p"},"unknown")),(0,p.kt)("h4",{id:"defined-in-4"},"Defined in"),(0,p.kt)("p",null,(0,p.kt)("a",{parentName:"p",href:"https://github.com/ardatan/graphql-tools/blob/master/packages/mock/src/types.ts#L117"},"packages/mock/src/types.ts:117")),(0,p.kt)("hr",null),(0,p.kt)("h3",{id:"reset"},"reset"),(0,p.kt)("p",null,"\u25b8 ",(0,p.kt)("strong",{parentName:"p"},"reset"),"(): ",(0,p.kt)("inlineCode",{parentName:"p"},"void")),(0,p.kt)("p",null,"Resets the mock store"),(0,p.kt)("h4",{id:"returns-4"},"Returns"),(0,p.kt)("p",null,(0,p.kt)("inlineCode",{parentName:"p"},"void")),(0,p.kt)("h4",{id:"defined-in-5"},"Defined in"),(0,p.kt)("p",null,(0,p.kt)("a",{parentName:"p",href:"https://github.com/ardatan/graphql-tools/blob/master/packages/mock/src/types.ts#L182"},"packages/mock/src/types.ts:182")),(0,p.kt)("hr",null),(0,p.kt)("h3",{id:"set"},"set"),(0,p.kt)("p",null,"\u25b8 ",(0,p.kt)("strong",{parentName:"p"},"set"),"<","KeyT\\",">","(",(0,p.kt)("inlineCode",{parentName:"p"},"args"),"): ",(0,p.kt)("inlineCode",{parentName:"p"},"void")),(0,p.kt)("p",null,"Set a field value in the store for the given type, key and field\nname \u2014 and optionally field arguments."),(0,p.kt)("p",null,"If the the field return type is an ",(0,p.kt)("inlineCode",{parentName:"p"},"ObjectType")," or a list of\n",(0,p.kt)("inlineCode",{parentName:"p"},"ObjectType"),", you can set references to other entity as value:"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-ts"},"// set the viewer name\nstore.set('User', 1, 'name', 'Alexandre);\nstore.set('Query', 'ROOT', 'viewer', store.get('User', 1));\n\n// set the friends of viewer\nstore.set('User', 2, 'name', 'Emily');\nstore.set('User', 3, 'name', 'Caroline');\nstore.set('User', 1, 'friends', [store.get('User', 2), store.get('User', 3)]);\n")),(0,p.kt)("p",null,"But it also supports nested set:"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-ts"},"store.set('Query', 'ROOT', 'viewer', {\n name: 'Alexandre',\n friends: [\n   { name: 'Emily' }\n   { name: 'Caroline }\n ]\n});\n")),(0,p.kt)("h4",{id:"type-parameters-4"},"Type parameters"),(0,p.kt)("table",null,(0,p.kt)("thead",{parentName:"table"},(0,p.kt)("tr",{parentName:"thead"},(0,p.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,p.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,p.kt)("tbody",{parentName:"table"},(0,p.kt)("tr",{parentName:"tbody"},(0,p.kt)("td",{parentName:"tr",align:"left"},(0,p.kt)("inlineCode",{parentName:"td"},"KeyT")),(0,p.kt)("td",{parentName:"tr",align:"left"},(0,p.kt)("inlineCode",{parentName:"td"},"KeyT"),": ",(0,p.kt)("a",{parentName:"td",href:"/docs/api/modules/mock#keytypeconstraints"},"KeyTypeConstraints")," = ",(0,p.kt)("inlineCode",{parentName:"td"},"string"))))),(0,p.kt)("h4",{id:"parameters-4"},"Parameters"),(0,p.kt)("table",null,(0,p.kt)("thead",{parentName:"table"},(0,p.kt)("tr",{parentName:"thead"},(0,p.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,p.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,p.kt)("tbody",{parentName:"table"},(0,p.kt)("tr",{parentName:"tbody"},(0,p.kt)("td",{parentName:"tr",align:"left"},(0,p.kt)("inlineCode",{parentName:"td"},"args")),(0,p.kt)("td",{parentName:"tr",align:"left"},(0,p.kt)("a",{parentName:"td",href:"/docs/api/modules/mock#setargs"},"SetArgs"),"<","KeyT\\",">")))),(0,p.kt)("h4",{id:"returns-5"},"Returns"),(0,p.kt)("p",null,(0,p.kt)("inlineCode",{parentName:"p"},"void")),(0,p.kt)("h4",{id:"defined-in-6"},"Defined in"),(0,p.kt)("p",null,(0,p.kt)("a",{parentName:"p",href:"https://github.com/ardatan/graphql-tools/blob/master/packages/mock/src/types.ts#L153"},"packages/mock/src/types.ts:153")),(0,p.kt)("p",null,"\u25b8 ",(0,p.kt)("strong",{parentName:"p"},"set"),"<","KeyT\\",">","(",(0,p.kt)("inlineCode",{parentName:"p"},"typeName"),", ",(0,p.kt)("inlineCode",{parentName:"p"},"key"),", ",(0,p.kt)("inlineCode",{parentName:"p"},"fieldName"),", ",(0,p.kt)("inlineCode",{parentName:"p"},"value?"),"): ",(0,p.kt)("inlineCode",{parentName:"p"},"void")),(0,p.kt)("p",null,"Shorthand for ",(0,p.kt)("inlineCode",{parentName:"p"},"set({typeName, key, fieldName, value})"),"."),(0,p.kt)("h4",{id:"type-parameters-5"},"Type parameters"),(0,p.kt)("table",null,(0,p.kt)("thead",{parentName:"table"},(0,p.kt)("tr",{parentName:"thead"},(0,p.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,p.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,p.kt)("tbody",{parentName:"table"},(0,p.kt)("tr",{parentName:"tbody"},(0,p.kt)("td",{parentName:"tr",align:"left"},(0,p.kt)("inlineCode",{parentName:"td"},"KeyT")),(0,p.kt)("td",{parentName:"tr",align:"left"},(0,p.kt)("inlineCode",{parentName:"td"},"KeyT"),": ",(0,p.kt)("a",{parentName:"td",href:"/docs/api/modules/mock#keytypeconstraints"},"KeyTypeConstraints")," = ",(0,p.kt)("inlineCode",{parentName:"td"},"string"))))),(0,p.kt)("h4",{id:"parameters-5"},"Parameters"),(0,p.kt)("table",null,(0,p.kt)("thead",{parentName:"table"},(0,p.kt)("tr",{parentName:"thead"},(0,p.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,p.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,p.kt)("tbody",{parentName:"table"},(0,p.kt)("tr",{parentName:"tbody"},(0,p.kt)("td",{parentName:"tr",align:"left"},(0,p.kt)("inlineCode",{parentName:"td"},"typeName")),(0,p.kt)("td",{parentName:"tr",align:"left"},(0,p.kt)("inlineCode",{parentName:"td"},"string"))),(0,p.kt)("tr",{parentName:"tbody"},(0,p.kt)("td",{parentName:"tr",align:"left"},(0,p.kt)("inlineCode",{parentName:"td"},"key")),(0,p.kt)("td",{parentName:"tr",align:"left"},(0,p.kt)("inlineCode",{parentName:"td"},"KeyT"))),(0,p.kt)("tr",{parentName:"tbody"},(0,p.kt)("td",{parentName:"tr",align:"left"},(0,p.kt)("inlineCode",{parentName:"td"},"fieldName")),(0,p.kt)("td",{parentName:"tr",align:"left"},(0,p.kt)("inlineCode",{parentName:"td"},"string"))),(0,p.kt)("tr",{parentName:"tbody"},(0,p.kt)("td",{parentName:"tr",align:"left"},(0,p.kt)("inlineCode",{parentName:"td"},"value?")),(0,p.kt)("td",{parentName:"tr",align:"left"},(0,p.kt)("inlineCode",{parentName:"td"},"unknown"))))),(0,p.kt)("h4",{id:"returns-6"},"Returns"),(0,p.kt)("p",null,(0,p.kt)("inlineCode",{parentName:"p"},"void")),(0,p.kt)("h4",{id:"defined-in-7"},"Defined in"),(0,p.kt)("p",null,(0,p.kt)("a",{parentName:"p",href:"https://github.com/ardatan/graphql-tools/blob/master/packages/mock/src/types.ts#L158"},"packages/mock/src/types.ts:158")),(0,p.kt)("p",null,"\u25b8 ",(0,p.kt)("strong",{parentName:"p"},"set"),"<","KeyT\\",">","(",(0,p.kt)("inlineCode",{parentName:"p"},"typeName"),", ",(0,p.kt)("inlineCode",{parentName:"p"},"key"),", ",(0,p.kt)("inlineCode",{parentName:"p"},"values"),"): ",(0,p.kt)("inlineCode",{parentName:"p"},"void")),(0,p.kt)("p",null,"Set the given field values to the type with key."),(0,p.kt)("h4",{id:"type-parameters-6"},"Type parameters"),(0,p.kt)("table",null,(0,p.kt)("thead",{parentName:"table"},(0,p.kt)("tr",{parentName:"thead"},(0,p.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,p.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,p.kt)("tbody",{parentName:"table"},(0,p.kt)("tr",{parentName:"tbody"},(0,p.kt)("td",{parentName:"tr",align:"left"},(0,p.kt)("inlineCode",{parentName:"td"},"KeyT")),(0,p.kt)("td",{parentName:"tr",align:"left"},(0,p.kt)("inlineCode",{parentName:"td"},"KeyT"),": ",(0,p.kt)("a",{parentName:"td",href:"/docs/api/modules/mock#keytypeconstraints"},"KeyTypeConstraints")," = ",(0,p.kt)("inlineCode",{parentName:"td"},"string"))))),(0,p.kt)("h4",{id:"parameters-6"},"Parameters"),(0,p.kt)("table",null,(0,p.kt)("thead",{parentName:"table"},(0,p.kt)("tr",{parentName:"thead"},(0,p.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,p.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,p.kt)("tbody",{parentName:"table"},(0,p.kt)("tr",{parentName:"tbody"},(0,p.kt)("td",{parentName:"tr",align:"left"},(0,p.kt)("inlineCode",{parentName:"td"},"typeName")),(0,p.kt)("td",{parentName:"tr",align:"left"},(0,p.kt)("inlineCode",{parentName:"td"},"string"))),(0,p.kt)("tr",{parentName:"tbody"},(0,p.kt)("td",{parentName:"tr",align:"left"},(0,p.kt)("inlineCode",{parentName:"td"},"key")),(0,p.kt)("td",{parentName:"tr",align:"left"},(0,p.kt)("inlineCode",{parentName:"td"},"KeyT"))),(0,p.kt)("tr",{parentName:"tbody"},(0,p.kt)("td",{parentName:"tr",align:"left"},(0,p.kt)("inlineCode",{parentName:"td"},"values")),(0,p.kt)("td",{parentName:"tr",align:"left"},(0,p.kt)("inlineCode",{parentName:"td"},"Object"))))),(0,p.kt)("h4",{id:"returns-7"},"Returns"),(0,p.kt)("p",null,(0,p.kt)("inlineCode",{parentName:"p"},"void")),(0,p.kt)("h4",{id:"defined-in-8"},"Defined in"),(0,p.kt)("p",null,(0,p.kt)("a",{parentName:"p",href:"https://github.com/ardatan/graphql-tools/blob/master/packages/mock/src/types.ts#L163"},"packages/mock/src/types.ts:163")),(0,p.kt)("p",null,"\u25b8 ",(0,p.kt)("strong",{parentName:"p"},"set"),"<","KeyT\\",">","(",(0,p.kt)("inlineCode",{parentName:"p"},"ref"),", ",(0,p.kt)("inlineCode",{parentName:"p"},"fieldName"),", ",(0,p.kt)("inlineCode",{parentName:"p"},"value?"),"): ",(0,p.kt)("inlineCode",{parentName:"p"},"void")),(0,p.kt)("p",null,"Shorthand for ",(0,p.kt)("inlineCode",{parentName:"p"},"set({ref.$ref.typeName, ref.$ref.key, fieldName, value})"),"."),(0,p.kt)("h4",{id:"type-parameters-7"},"Type parameters"),(0,p.kt)("table",null,(0,p.kt)("thead",{parentName:"table"},(0,p.kt)("tr",{parentName:"thead"},(0,p.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,p.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,p.kt)("tbody",{parentName:"table"},(0,p.kt)("tr",{parentName:"tbody"},(0,p.kt)("td",{parentName:"tr",align:"left"},(0,p.kt)("inlineCode",{parentName:"td"},"KeyT")),(0,p.kt)("td",{parentName:"tr",align:"left"},(0,p.kt)("inlineCode",{parentName:"td"},"KeyT"),": ",(0,p.kt)("a",{parentName:"td",href:"/docs/api/modules/mock#keytypeconstraints"},"KeyTypeConstraints")," = ",(0,p.kt)("inlineCode",{parentName:"td"},"string"))))),(0,p.kt)("h4",{id:"parameters-7"},"Parameters"),(0,p.kt)("table",null,(0,p.kt)("thead",{parentName:"table"},(0,p.kt)("tr",{parentName:"thead"},(0,p.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,p.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,p.kt)("tbody",{parentName:"table"},(0,p.kt)("tr",{parentName:"tbody"},(0,p.kt)("td",{parentName:"tr",align:"left"},(0,p.kt)("inlineCode",{parentName:"td"},"ref")),(0,p.kt)("td",{parentName:"tr",align:"left"},(0,p.kt)("a",{parentName:"td",href:"/docs/api/modules/mock#ref"},"Ref"),"<","KeyT\\",">")),(0,p.kt)("tr",{parentName:"tbody"},(0,p.kt)("td",{parentName:"tr",align:"left"},(0,p.kt)("inlineCode",{parentName:"td"},"fieldName")),(0,p.kt)("td",{parentName:"tr",align:"left"},(0,p.kt)("inlineCode",{parentName:"td"},"string"))),(0,p.kt)("tr",{parentName:"tbody"},(0,p.kt)("td",{parentName:"tr",align:"left"},(0,p.kt)("inlineCode",{parentName:"td"},"value?")),(0,p.kt)("td",{parentName:"tr",align:"left"},(0,p.kt)("inlineCode",{parentName:"td"},"unknown"))))),(0,p.kt)("h4",{id:"returns-8"},"Returns"),(0,p.kt)("p",null,(0,p.kt)("inlineCode",{parentName:"p"},"void")),(0,p.kt)("h4",{id:"defined-in-9"},"Defined in"),(0,p.kt)("p",null,(0,p.kt)("a",{parentName:"p",href:"https://github.com/ardatan/graphql-tools/blob/master/packages/mock/src/types.ts#L172"},"packages/mock/src/types.ts:172")),(0,p.kt)("p",null,"\u25b8 ",(0,p.kt)("strong",{parentName:"p"},"set"),"<","KeyT\\",">","(",(0,p.kt)("inlineCode",{parentName:"p"},"ref"),", ",(0,p.kt)("inlineCode",{parentName:"p"},"values"),"): ",(0,p.kt)("inlineCode",{parentName:"p"},"void")),(0,p.kt)("p",null,"Set the given field values to the type with ref."),(0,p.kt)("h4",{id:"type-parameters-8"},"Type parameters"),(0,p.kt)("table",null,(0,p.kt)("thead",{parentName:"table"},(0,p.kt)("tr",{parentName:"thead"},(0,p.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,p.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,p.kt)("tbody",{parentName:"table"},(0,p.kt)("tr",{parentName:"tbody"},(0,p.kt)("td",{parentName:"tr",align:"left"},(0,p.kt)("inlineCode",{parentName:"td"},"KeyT")),(0,p.kt)("td",{parentName:"tr",align:"left"},(0,p.kt)("inlineCode",{parentName:"td"},"KeyT"),": ",(0,p.kt)("a",{parentName:"td",href:"/docs/api/modules/mock#keytypeconstraints"},"KeyTypeConstraints")," = ",(0,p.kt)("inlineCode",{parentName:"td"},"string"))))),(0,p.kt)("h4",{id:"parameters-8"},"Parameters"),(0,p.kt)("table",null,(0,p.kt)("thead",{parentName:"table"},(0,p.kt)("tr",{parentName:"thead"},(0,p.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,p.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,p.kt)("tbody",{parentName:"table"},(0,p.kt)("tr",{parentName:"tbody"},(0,p.kt)("td",{parentName:"tr",align:"left"},(0,p.kt)("inlineCode",{parentName:"td"},"ref")),(0,p.kt)("td",{parentName:"tr",align:"left"},(0,p.kt)("a",{parentName:"td",href:"/docs/api/modules/mock#ref"},"Ref"),"<","KeyT\\",">")),(0,p.kt)("tr",{parentName:"tbody"},(0,p.kt)("td",{parentName:"tr",align:"left"},(0,p.kt)("inlineCode",{parentName:"td"},"values")),(0,p.kt)("td",{parentName:"tr",align:"left"},(0,p.kt)("inlineCode",{parentName:"td"},"Object"))))),(0,p.kt)("h4",{id:"returns-9"},"Returns"),(0,p.kt)("p",null,(0,p.kt)("inlineCode",{parentName:"p"},"void")),(0,p.kt)("h4",{id:"defined-in-10"},"Defined in"),(0,p.kt)("p",null,(0,p.kt)("a",{parentName:"p",href:"https://github.com/ardatan/graphql-tools/blob/master/packages/mock/src/types.ts#L177"},"packages/mock/src/types.ts:177")))}o.isMDXComponent=!0}}]);