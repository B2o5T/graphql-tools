(self.webpackChunk_graphql_tools_website=self.webpackChunk_graphql_tools_website||[]).push([[8850],{5318:function(e,n,t){"use strict";t.d(n,{Zo:function(){return u},kt:function(){return f}});var o=t(7378);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},s=Object.keys(e);for(o=0;o<s.length;o++)t=s[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(o=0;o<s.length;o++)t=s[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var a=o.createContext({}),c=function(e){var n=o.useContext(a),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=c(e.components);return o.createElement(a.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},m=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,s=e.originalType,a=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),m=c(t),f=r,d=m["".concat(a,".").concat(f)]||m[f]||p[f]||s;return t?o.createElement(d,i(i({ref:n},u),{},{components:t})):o.createElement(d,i({ref:n},u))}));function f(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var s=t.length,i=new Array(s);i[0]=m;var l={};for(var a in n)hasOwnProperty.call(n,a)&&(l[a]=n[a]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var c=2;c<s;c++)i[c]=t[c];return o.createElement.apply(null,i)}return o.createElement.apply(null,t)}m.displayName="MDXCreateElement"},212:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return l},metadata:function(){return a},toc:function(){return c},default:function(){return p}});var o=t(9603),r=t(120),s=(t(7378),t(5318)),i=["components"],l={id:"resolvers-composition",title:"Resolvers composition",sidebar_label:"Resolvers composition"},a={unversionedId:"resolvers-composition",id:"resolvers-composition",isDocsHomePage:!1,title:"Resolvers composition",description:"Composition tool for GraphQL, with helpers to combine multiple resolvers into one, specify dependencies between fields, and more.",source:"@site/docs/resolvers-composition.md",sourceDirName:".",slug:"/resolvers-composition",permalink:"/docs/resolvers-composition",editUrl:"https://github.com/ardatan/graphql-tools/edit/master/website/docs/resolvers-composition.md",version:"current",sidebar_label:"Resolvers composition",frontMatter:{id:"resolvers-composition",title:"Resolvers composition",sidebar_label:"Resolvers composition"},sidebar:"someSidebar",previous:{title:"Resolvers",permalink:"/docs/resolvers"},next:{title:"Custom scalars and enums",permalink:"/docs/scalars"}},c=[],u={toc:c};function p(e){var n=e.components,t=(0,r.Z)(e,i);return(0,s.kt)("wrapper",(0,o.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"Composition tool for GraphQL, with helpers to combine multiple resolvers into one, specify dependencies between fields, and more."),(0,s.kt)("p",null,"When developing a GraphQL server, it is common to perform some authorization logic on your resolvers, usually based on the context of a request. With Resolvers Composition you can easily accomplish that and still make the code decoupled - thus testable - by combining multiple single-logic resolvers into one."),(0,s.kt)("p",null,"The following is an example of a simple logged-in authorization logic:"),(0,s.kt)("p",null,"Instead of doing this,"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"const resolvers ={\n    Query: {\n        myQuery: (root, args, context) => {\n            // Make sure that the user is authenticated\n            if (!context.currentUser) {\n                throw new Error('You are not authenticated!');\n            }\n\n            // Make sure that the user has the correct roles\n            if (!context.currentUser.roles || context.currentUser.roles.includes('EDITOR')) {\n                throw new Error('You are not authorized!');\n            }\n\n            // Business logic\n            if (args.something === '1') {\n                return true;\n            }\n\n            return false;\n        },\n    },\n};\n")),(0,s.kt)("p",null,"You can do;"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"const { composeResolvers } = require('@graphql-tools/resolvers-composition');\n\nconst resolvers ={\n    Query: {\n        myQuery: (root, args, context) => {\n            if (args.something === '1') {\n                return true;\n            }\n\n            return false;\n        },\n    },\n};\n\nconst isAuthenticated = () => next => async (root, args, context, info) => {\n    if (!context.currentUser) {\n        throw new Error('You are not authenticated!');\n    }\n\n    return next(root, args, context, info);\n};\n\nconst hasRole = (role: string) => next => async (root, args, context, info) => {\n    if (!context.currentUser.roles || context.currentUser.roles.includes(role)) {\n        throw new Error('You are not authorized!');\n    }\n\n    return next(root, args, context, info);\n};\n\nconst resolversComposition = {\n    'Query.myQuery': [isAuthenticated(), hasRole('EDITOR')],\n};\n\nconst composedResolvers = composeResolvers(resolvers, resolversComposition);\n")),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"composeResolvers")," is a method in ",(0,s.kt)("inlineCode",{parentName:"p"},"@graphql-tools/resolvers-composition")," package that accepts ",(0,s.kt)("inlineCode",{parentName:"p"},"IResolvers")," object and mappings for composition functions that would be run before resolver itself."))}p.isMDXComponent=!0}}]);