(self.webpackChunk_graphql_tools_website=self.webpackChunk_graphql_tools_website||[]).push([[4597],{5318:function(e,n,t){"use strict";t.d(n,{Zo:function(){return c},kt:function(){return u}});var r=t(7378);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var p=r.createContext({}),s=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=s(e.components);return r.createElement(p.Provider,{value:n},e.children)},g={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,l=e.originalType,p=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),m=s(t),u=a,d=m["".concat(p,".").concat(u)]||m[u]||g[u]||l;return t?r.createElement(d,o(o({ref:n},c),{},{components:t})):r.createElement(d,o({ref:n},c))}));function u(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var l=t.length,o=new Array(l);o[0]=m;var i={};for(var p in n)hasOwnProperty.call(n,p)&&(i[p]=n[p]);i.originalType=e,i.mdxType="string"==typeof e?e:a,o[1]=i;for(var s=2;s<l;s++)o[s]=t[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},3349:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return i},metadata:function(){return p},toc:function(){return s},default:function(){return g}});var r=t(9603),a=t(120),l=(t(7378),t(5318)),o=["components"],i={id:"graphql-tag-pluck",title:"Extracting GraphQL definitions from code files",sidebar_label:"GraphQL Tag Pluck"},p={unversionedId:"graphql-tag-pluck",id:"graphql-tag-pluck",isDocsHomePage:!1,title:"Extracting GraphQL definitions from code files",description:"@graphql-tools/graphql-tag-pluck will take JavaScript code as an input and will pluck all template literals provided to graphql-tag.",source:"@site/docs/graphql-tag-pluck.md",sourceDirName:".",slug:"/graphql-tag-pluck",permalink:"/docs/graphql-tag-pluck",editUrl:"https://github.com/ardatan/graphql-tools/edit/master/website/docs/graphql-tag-pluck.md",version:"current",sidebar_label:"GraphQL Tag Pluck",frontMatter:{id:"graphql-tag-pluck",title:"Extracting GraphQL definitions from code files",sidebar_label:"GraphQL Tag Pluck"},sidebar:"someSidebar",previous:{title:"Loading GraphQL operation documents from different sources",permalink:"/docs/documents-loading"},next:{title:"Optimizing operations using Relay Compiler",permalink:"/docs/relay-operation-optimizer"}},s=[{value:"Usage",id:"usage",children:[]},{value:"Options",id:"options",children:[]}],c={toc:s};function g(e){var n=e.components,t=(0,a.Z)(e,o);return(0,l.kt)("wrapper",(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"@graphql-tools/graphql-tag-pluck")," will take JavaScript code as an input and will pluck all template literals provided to ",(0,l.kt)("inlineCode",{parentName:"p"},"graphql-tag"),"."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Input:")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"import gql from 'graphql-tag';\n\nconst fragment = gql`\n  fragment Foo on FooType {\n    id\n  }\n`;\n\nconst doc = gql`\n  query foo {\n    foo {\n      ...Foo\n    }\n  }\n\n  ${fragment}\n`;\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Output:")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-graphql"},"fragment Foo on FooType {\n  id\n}\n\nquery foo {\n  foo {\n    ...Foo\n  }\n}\n")),(0,l.kt)("p",null,"Originally created because of ",(0,l.kt)("a",{parentName:"p",href:"https://graphql-code-generator.com/"},"https://graphql-code-generator.com/"),"."),(0,l.kt)("h3",{id:"usage"},"Usage"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"@graphql-tools/graphql-tag-pluck")," is installable via NPM (or Yarn):"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"$ npm install @graphql-tools/graphql-tag-pluck\n")),(0,l.kt)("p",null,"Once installed you can pluck GraphQL template literals using one of the following methods:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"import { gqlPluckFromCodeStringSync, gqlPluckFromCodeString } from '@graphql-tools/graphql-tag-pluck';\n\n// Returns promise\ngqlPluckFromCodeString(\n    filePath,  // this parameter is required to detect file type\n    fs.readFileSync(filePath, 'utf8'),\n);\n\n// Returns string\ngqlPluckFromCodeStringSync(\n    filePath,\n    fs.readFileSync(filePath, 'utf8'),\n);\n")),(0,l.kt)("p",null,"Template literals leaded by magic comments will also be extracted :-)"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"/* GraphQL */ `\n  enum MessageTypes {\n    text\n    media\n    draftjs\n  }\n`;\n")),(0,l.kt)("p",null,"supported file extensions are: ",(0,l.kt)("inlineCode",{parentName:"p"},".js"),", ",(0,l.kt)("inlineCode",{parentName:"p"},".jsx"),", ",(0,l.kt)("inlineCode",{parentName:"p"},".ts"),", ",(0,l.kt)("inlineCode",{parentName:"p"},".tsx"),", ",(0,l.kt)("inlineCode",{parentName:"p"},".flow"),", ",(0,l.kt)("inlineCode",{parentName:"p"},".flow.js"),", ",(0,l.kt)("inlineCode",{parentName:"p"},".flow.jsx"),", ",(0,l.kt)("inlineCode",{parentName:"p"},".graphqls"),", ",(0,l.kt)("inlineCode",{parentName:"p"},".graphql"),", ",(0,l.kt)("inlineCode",{parentName:"p"},".gqls"),", ",(0,l.kt)("inlineCode",{parentName:"p"},".gql"),"."),(0,l.kt)("h3",{id:"options"},"Options"),(0,l.kt)("p",null,"It is recommended to look at the ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/ardatan/graphql-tools/blob/master/packages/graphql-tag-pluck/src/visitor.ts"},"source code")," for a clearer understanding of the transformation options."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"gqlMagicComment"))),(0,l.kt)("p",{parentName:"li"},"The magic comment anchor to look for when parsing GraphQL strings. Defaults to ",(0,l.kt)("inlineCode",{parentName:"p"},"graphql"),", which may be translated into ",(0,l.kt)("inlineCode",{parentName:"p"},"/* GraphQL */")," in code.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"globalGqlIdentifierName"))),(0,l.kt)("p",{parentName:"li"},"Allows to use a global identifier instead of a module import."),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-js"},"// `graphql` is a global function\nexport const usersQuery = graphql`\n  {\n    users {\n      id\n      name\n    }\n  }\n`;\n"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"modules"))),(0,l.kt)("p",{parentName:"li"},"An array of packages that are responsible for exporting the GraphQL string parser function. The following modules are supported by default:"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-js"},"{\n  modules: [\n    {\n      // import gql from 'graphql-tag'\n      name: 'graphql-tag',\n    },\n    {\n      name: 'graphql-tag.macro',\n    },\n    {\n      // import { graphql } from 'gatsby'\n      name: 'gatsby',\n      identifier: 'graphql',\n    },\n    {\n      name: 'apollo-server-express',\n      identifier: 'gql',\n    },\n    {\n      name: 'apollo-server',\n      identifier: 'gql',\n    },\n    {\n      name: 'react-relay',\n      identifier: 'graphql',\n    },\n    {\n      name: 'apollo-boost',\n      identifier: 'gql',\n    },\n    {\n      name: 'apollo-server-koa',\n      identifier: 'gql',\n    },\n    {\n      name: 'apollo-server-hapi',\n      identifier: 'gql',\n    },\n    {\n      name: 'apollo-server-fastify',\n      identifier: 'gql',\n    },\n    {\n      name: ' apollo-server-lambda',\n      identifier: 'gql',\n    },\n    {\n      name: 'apollo-server-micro',\n      identifier: 'gql',\n    },\n    {\n      name: 'apollo-server-azure-functions',\n      identifier: 'gql',\n    },\n    {\n      name: 'apollo-server-cloud-functions',\n      identifier: 'gql',\n    },\n    {\n      name: 'apollo-server-cloudflare',\n      identifier: 'gql',\n    },\n  ];\n}\n")))))}g.isMDXComponent=!0}}]);