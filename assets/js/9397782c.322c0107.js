(self.webpackChunk_graphql_tools_website=self.webpackChunk_graphql_tools_website||[]).push([[1298],{5318:function(e,t,n){"use strict";n.d(t,{Zo:function(){return m},kt:function(){return u}});var r=n(7378);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var o=r.createContext({}),l=function(e){var t=r.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},m=function(e){var t=l(e.components);return r.createElement(o.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,m=c(e,["components","mdxType","originalType","parentName"]),p=l(n),u=a,g=p["".concat(o,".").concat(u)]||p[u]||h[u]||i;return n?r.createElement(g,s(s({ref:t},m),{},{components:n})):r.createElement(g,s({ref:t},m))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,s=new Array(i);s[0]=p;var c={};for(var o in t)hasOwnProperty.call(t,o)&&(c[o]=t[o]);c.originalType=e,c.mdxType="string"==typeof e?e:a,s[1]=c;for(var l=2;l<i;l++)s[l]=n[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},1843:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return c},metadata:function(){return o},toc:function(){return l},default:function(){return h}});var r=n(9603),a=n(120),i=(n(7378),n(5318)),s=["components"],c={id:"schema-stitching",title:"Schema Stitching",sidebar_label:"Schema Stitching"},o={unversionedId:"schema-stitching",id:"schema-stitching",isDocsHomePage:!1,title:"Schema Stitching",description:"Schema stitching (@graphql-tools/stitch) creates a single GraphQL gateway schema from multiple underlying GraphQL services. Unlike schema merging, which simply combines local schema instances, stitching builds a combined proxy layer that delegates requests through to underlying service APIs. As of GraphQL Tools v7, stitching is fairly comparable to Apollo Federation with automated query planning, merged types, and declarative schema directives.",source:"@site/docs/schema-stitching.md",sourceDirName:".",slug:"/schema-stitching",permalink:"/docs/schema-stitching",editUrl:"https://github.com/ardatan/graphql-tools/edit/master/website/docs/schema-stitching.md",version:"current",sidebar_label:"Schema Stitching",frontMatter:{id:"schema-stitching",title:"Schema Stitching",sidebar_label:"Schema Stitching"}},l=[{value:"Topics",id:"topics",children:[]},{value:"Basic example",id:"basic-example",children:[]}],m={toc:l};function h(e){var t=e.components,n=(0,a.Z)(e,s);return(0,i.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Schema stitching (",(0,i.kt)("inlineCode",{parentName:"p"},"@graphql-tools/stitch"),") creates a single GraphQL gateway schema from multiple underlying GraphQL services. Unlike ",(0,i.kt)("a",{parentName:"p",href:"/docs/merge-schemas"},"schema merging"),", which simply combines local schema instances, stitching builds a combined proxy layer that delegates requests through to underlying service APIs. As of GraphQL Tools v7, stitching is fairly comparable to ",(0,i.kt)("a",{parentName:"p",href:"https://www.apollographql.com/docs/federation/"},"Apollo Federation")," with automated query planning, merged types, and declarative schema directives."),(0,i.kt)("h2",{id:"topics"},"Topics"),(0,i.kt)("p",null,"Browse the following documentation topics to learn about stitching libraries, or review the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/gmac/schema-stitching-handbook"},"Schema Stitching Handbook")," for working examples of major stitching features."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/stitch-combining-schemas"},"Combining multiple schemas")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/stitch-type-merging"},"Merging types across schemas")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/stitch-type-merging"},"Schema extensions")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/stitch-directives-sdl"},"Stitching directives SDL"))),(0,i.kt)("h2",{id:"basic-example"},"Basic example"),(0,i.kt)("p",null,'Given two self-contained subschemas, a single "stitched" schema can be built that delegates (or, proxies) relevant portions of a request to each subservice:'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"import { makeExecutableSchema } from '@graphql-tools/schema';\nimport { stitchSchemas } from '@graphql-tools/stitch';\nimport { stitchingDirectives } from '@graphql-tools/stitching-directives';\n\nconst postsService = makeExecutableSchema({\n  typeDefs: `\n    type Post {\n      id: ID!\n      message: String!\n      author: User\n    }\n\n    type User {\n      id: ID!\n      posts: [Post]\n    }\n\n    type Query {\n      post(id: ID!): Post\n      users(ids: [ID!]!): [User]! @merge(keyField: \"id\")\n    }\n  `,\n  resolvers: {\n    // ...\n  }\n});\n\nconst usersService = makeExecutableSchema({\n  typeDefs: `\n    type User {\n      id: ID!\n      username: String!\n      email: String!\n    }\n\n    type Query {\n      users(ids: [ID!]!): [User]! @merge(keyField: \"id\") @canonical\n    }\n  `,\n  resolvers: {\n    // ...\n  }\n});\n\nconst { stitchingDirectivesTransformer } = stitchingDirectives({\n  // options...\n});\n\nconst gatewaySchema = stitchSchemas({\n  subschemaConfigTransforms: [stitchingDirectivesTransformer],\n  subschemas: [\n    { schema: postsSchema, batch: true },\n    { schema: usersSchema, batch: true },\n  ]\n});\n")),(0,i.kt)("p",null,"Using the stitched proxy schema, data may be requested interchangeably from any service in the same request:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-graphql"},'query {\n  users(ids: ["1", "2"]) {\n    username\n    email\n    posts {\n      message\n      author {\n        username\n        email\n      }\n    }\n  }\n}\n')))}h.isMDXComponent=!0}}]);