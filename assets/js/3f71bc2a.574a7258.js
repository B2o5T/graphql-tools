(self.webpackChunk_graphql_tools_website=self.webpackChunk_graphql_tools_website||[]).push([[2448],{5318:function(e,t,n){"use strict";n.d(t,{Zo:function(){return p},kt:function(){return u}});var r=n(7378);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),d=l(n),u=a,h=d["".concat(c,".").concat(u)]||d[u]||m[u]||i;return n?r.createElement(h,s(s({ref:t},p),{},{components:n})):r.createElement(h,s({ref:t},p))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,s=new Array(i);s[0]=d;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o.mdxType="string"==typeof e?e:a,s[1]=o;for(var l=2;l<i;l++)s[l]=n[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},9956:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return s},metadata:function(){return o},toc:function(){return c},default:function(){return p}});var r=n(9603),a=n(120),i=(n(7378),n(5318)),s={id:"stitch-api",title:"Stitching API",description:"Stitching API"},o={unversionedId:"stitch-api",id:"stitch-api",isDocsHomePage:!1,title:"Stitching API",description:"Stitching API",source:"@site/docs/stitch-api.md",sourceDirName:".",slug:"/stitch-api",permalink:"/docs/stitch-api",editUrl:"https://github.com/ardatan/graphql-tools/edit/master/website/docs/stitch-api.md",version:"current",frontMatter:{id:"stitch-api",title:"Stitching API",description:"Stitching API"},sidebar:"someSidebar",previous:{title:"Extending stitched schemas",permalink:"/docs/stitch-schema-extensions"},next:{title:"Setup an HTTP server",permalink:"/docs/server-setup"}},c=[{value:"stitchSchemas",id:"stitchschemas",children:[]},{value:"createMergedTypeResolver",id:"createmergedtyperesolver",children:[]},{value:"forwardArgsToSelectionSet",id:"forwardargstoselectionset",children:[]}],l={toc:c};function p(e){var t=e.components,n=(0,a.Z)(e,["components"]);return(0,i.kt)("wrapper",(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h3",{id:"stitchschemas"},"stitchSchemas"),(0,i.kt)("p",null,"This is the main function that implements schema stitching. It accepts all the same arguments as ",(0,i.kt)("a",{parentName:"p",href:"/docs/generate-schema/"},(0,i.kt)("inlineCode",{parentName:"a"},"makeExecutableSchema")),", and the additions below."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"stitchSchemas({\n  subschemas?: Array<GraphQLSchema | SubschemaConfig | Array<SubschemaConfig>>;\n  types?: Array<GraphQLNamedType>;\n  typeDefs?: ITypeDefinitions;\n  resolvers?: IResolvers<any, TContext> | Array<IResolvers<any, TContext>>;\n  mergeDirectives?: boolean;\n  mergeTypes?: boolean | Array<string> | MergeTypeFilter;\n  typeMergingOptions?: TypeMergingOptions;\n  onTypeConflict?: OnTypeConflict;\n  subschemaConfigTransforms?: Array<SubschemaConfigTransform>;\n}): GraphQLSchema\n\nexport interface TypeMergingOptions {\n  typeDescriptionsMerger?: (candidates: Array<MergeTypeCandidate>) => string;\n  fieldConfigMerger?: (candidates: Array<MergeFieldConfigCandidate>) => GraphQLFieldConfig<any, any>;\n  inputFieldConfigMerger?: (candidates: Array<MergeInputFieldConfigCandidate>) => GraphQLInputFieldConfig;\n}\n\nexport type OnTypeConflict = (\n  left: GraphQLNamedType,\n  right: GraphQLNamedType,\n  info?: {\n    left: {\n      subschema?: GraphQLSchema | SubschemaConfig;\n      transformedSubschema?: Subschema;\n    };\n    right: {\n      subschema?: GraphQLSchema | SubschemaConfig;\n      transformedSubschema?: Subschema;\n    };\n  }\n) => GraphQLNamedType;\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"subschemas"),": an array of schema-like objects. These subschemas are wrapped with proxying resolvers in the final schema."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"types"),": additional types to add to the final type map, most useful for custom scalars or enums."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"typeDefs"),": strings or parsed documents that contain additional types or type extensions. Type extensions are always applied last."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"resolvers"),": accepts ",(0,i.kt)("a",{parentName:"li",href:"/docs/resolvers/"},"standard resolvers")," with the addition of specifying a ",(0,i.kt)("a",{parentName:"li",href:"/docs/stitch-schema-extensions#selectionset"},(0,i.kt)("inlineCode",{parentName:"a"},"selectionSet")),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"mergeTypes"),": specifies a strategy for ",(0,i.kt)("a",{parentName:"li",href:"/docs/stitch-combining-schemas#duplicate-types"},"handling duplicated types"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"typeMergingOptions"),": allows customization of ",(0,i.kt)("a",{parentName:"li",href:"/docs/stitch-combining-schemas#automatic-merge"},"automatic type merging"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"onTypeConflict"),": allows customization of ",(0,i.kt)("a",{parentName:"li",href:"/docs/stitch-combining-schemas#manual-resolution"},"manual type resolution"),".")),(0,i.kt)("h3",{id:"createmergedtyperesolver"},"createMergedTypeResolver"),(0,i.kt)("p",null,"Creates a merged type resolver that may be ",(0,i.kt)("a",{parentName:"p",href:"/docs/stitch-type-merging#wrapped-resolvers"},"wrapped with custom behaviors"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"createMergedTypeResolver({\n  fieldName?: string;\n  args?: (originalResult: any) => Record<string, any>;\n  argsFromKeys?: (keys: ReadonlyArray<K>) => Record<string, any>;\n  valuesFromResults?: (results: any, keys: ReadonlyArray<K>) => Array<V>;\n}): MergedTypeResolver\n")),(0,i.kt)("h3",{id:"forwardargstoselectionset"},"forwardArgsToSelectionSet"),(0,i.kt)("p",null,"Creates a dynamic ",(0,i.kt)("inlineCode",{parentName:"p"},"selectionSet")," that ",(0,i.kt)("a",{parentName:"p",href:"/docs/stitch-schema-extensions#via-selectionset"},"forwards gateway arguments")," to a resolver selection hint."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"forwardArgsToSelectionSet(\n  selectionSet: string,\n  mapping?: Record<string, string[]>\n) => (field: FieldNode) => SelectionSetNode\n")))}p.isMDXComponent=!0}}]);