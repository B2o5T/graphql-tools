(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{138:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return c})),a.d(t,"metadata",(function(){return m})),a.d(t,"toc",(function(){return o})),a.d(t,"default",(function(){return s}));var r=a(3),n=a(8),b=(a(0),a(303)),c={},m={unversionedId:"api/classes/mock_src.mockstore",id:"api/classes/mock_src.mockstore",isDocsHomePage:!1,title:"mock_src.mockstore",description:"Class: MockStore",source:"@site/docs/api/classes/mock_src.mockstore.md",slug:"/api/classes/mock_src.mockstore",permalink:"/docs/api/classes/mock_src.mockstore",editUrl:"https://github.com/ardatan/graphql-tools/edit/master/website/docs/api/classes/mock_src.mockstore.md",version:"current",sidebar:"someSidebar",previous:{title:"mock_src.mocklist",permalink:"/docs/api/classes/mock_src.mocklist"},next:{title:"loaders_module_src.moduleloader",permalink:"/docs/api/classes/loaders_module_src.moduleloader"}},o=[{value:"Implements",id:"implements",children:[]},{value:"Table of contents",id:"table-of-contents",children:[{value:"Constructors",id:"constructors",children:[]},{value:"Properties",id:"properties",children:[]},{value:"Methods",id:"methods",children:[]}]},{value:"Constructors",id:"constructors-1",children:[{value:"constructor",id:"constructor",children:[]}]},{value:"Properties",id:"properties-1",children:[{value:"schema",id:"schema",children:[]}]},{value:"Methods",id:"methods-1",children:[{value:"get",id:"get",children:[]},{value:"reset",id:"reset",children:[]},{value:"set",id:"set",children:[]}]}],p={toc:o};function s(e){var t=e.components,a=Object(n.a)(e,["components"]);return Object(b.b)("wrapper",Object(r.a)({},p,a,{components:t,mdxType:"MDXLayout"}),Object(b.b)("h1",{id:"class-mockstore"},"Class: MockStore"),Object(b.b)("p",null,Object(b.b)("a",{parentName:"p",href:"../modules/mock_src"},"mock/src"),".MockStore"),Object(b.b)("h2",{id:"implements"},"Implements"),Object(b.b)("ul",null,Object(b.b)("li",{parentName:"ul"},Object(b.b)("a",{parentName:"li",href:"/docs/api/interfaces/mock_src.imockstore"},Object(b.b)("em",{parentName:"a"},"IMockStore")))),Object(b.b)("h2",{id:"table-of-contents"},"Table of contents"),Object(b.b)("h3",{id:"constructors"},"Constructors"),Object(b.b)("ul",null,Object(b.b)("li",{parentName:"ul"},Object(b.b)("a",{parentName:"li",href:"/docs/api/classes/mock_src.mockstore#constructor"},"constructor"))),Object(b.b)("h3",{id:"properties"},"Properties"),Object(b.b)("ul",null,Object(b.b)("li",{parentName:"ul"},Object(b.b)("a",{parentName:"li",href:"/docs/api/classes/mock_src.mockstore#schema"},"schema"))),Object(b.b)("h3",{id:"methods"},"Methods"),Object(b.b)("ul",null,Object(b.b)("li",{parentName:"ul"},Object(b.b)("a",{parentName:"li",href:"/docs/api/classes/mock_src.mockstore#get"},"get")),Object(b.b)("li",{parentName:"ul"},Object(b.b)("a",{parentName:"li",href:"/docs/api/classes/mock_src.mockstore#reset"},"reset")),Object(b.b)("li",{parentName:"ul"},Object(b.b)("a",{parentName:"li",href:"/docs/api/classes/mock_src.mockstore#set"},"set"))),Object(b.b)("h2",{id:"constructors-1"},"Constructors"),Object(b.b)("h3",{id:"constructor"},"constructor"),Object(b.b)("p",null,"+"," ",Object(b.b)("strong",{parentName:"p"},"new MockStore"),"(",Object(b.b)("inlineCode",{parentName:"p"},"__namedParameters"),": { ",Object(b.b)("inlineCode",{parentName:"p"},"mocks?"),": ",Object(b.b)("a",{parentName:"p",href:"/docs/api/modules/mock#imocks"},Object(b.b)("em",{parentName:"a"},"IMocks"))," ; ",Object(b.b)("inlineCode",{parentName:"p"},"schema"),": ",Object(b.b)("em",{parentName:"p"},"GraphQLSchema")," ; ",Object(b.b)("inlineCode",{parentName:"p"},"typePolicies?"),": { ","[typeName: string]",": ",Object(b.b)("a",{parentName:"p",href:"/docs/api/modules/mock#typepolicy"},Object(b.b)("em",{parentName:"a"},"TypePolicy")),";  }  }): ",Object(b.b)("a",{parentName:"p",href:"mock_src.mockstore"},Object(b.b)("em",{parentName:"a"},"MockStore"))),Object(b.b)("h4",{id:"parameters"},"Parameters"),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",{parentName:"tr",align:"left"},"Name"),Object(b.b)("th",{parentName:"tr",align:"left"},"Type"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:"left"},Object(b.b)("inlineCode",{parentName:"td"},"__namedParameters")),Object(b.b)("td",{parentName:"tr",align:"left"},Object(b.b)("em",{parentName:"td"},"object"))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:"left"},Object(b.b)("inlineCode",{parentName:"td"},"__namedParameters.mocks?")),Object(b.b)("td",{parentName:"tr",align:"left"},Object(b.b)("a",{parentName:"td",href:"/docs/api/modules/mock#imocks"},Object(b.b)("em",{parentName:"a"},"IMocks")))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:"left"},Object(b.b)("inlineCode",{parentName:"td"},"__namedParameters.schema")),Object(b.b)("td",{parentName:"tr",align:"left"},Object(b.b)("em",{parentName:"td"},"GraphQLSchema"))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:"left"},Object(b.b)("inlineCode",{parentName:"td"},"__namedParameters.typePolicies?")),Object(b.b)("td",{parentName:"tr",align:"left"},Object(b.b)("em",{parentName:"td"},"object"))))),Object(b.b)("p",null,Object(b.b)("strong",{parentName:"p"},"Returns:")," ",Object(b.b)("a",{parentName:"p",href:"mock_src.mockstore"},Object(b.b)("em",{parentName:"a"},"MockStore"))),Object(b.b)("p",null,"Defined in: ",Object(b.b)("a",{parentName:"p",href:"https://github.com/ardatan/graphql-tools/blob/master/packages/mock/src/MockStore.ts#L54"},"packages/mock/src/MockStore.ts:54")),Object(b.b)("h2",{id:"properties-1"},"Properties"),Object(b.b)("h3",{id:"schema"},"schema"),Object(b.b)("p",null,"\u2022 ",Object(b.b)("strong",{parentName:"p"},"schema"),": ",Object(b.b)("em",{parentName:"p"},"GraphQLSchema")),Object(b.b)("p",null,"Implementation of: ",Object(b.b)("a",{parentName:"p",href:"/docs/api/interfaces/mock_src.imockstore"},"IMockStore"),".",Object(b.b)("a",{parentName:"p",href:"/docs/api/interfaces/mock_src.imockstore.md#schema"},"schema")),Object(b.b)("p",null,"Defined in: ",Object(b.b)("a",{parentName:"p",href:"https://github.com/ardatan/graphql-tools/blob/master/packages/mock/src/MockStore.ts#L48"},"packages/mock/src/MockStore.ts:48")),Object(b.b)("h2",{id:"methods-1"},"Methods"),Object(b.b)("h3",{id:"get"},"get"),Object(b.b)("p",null,"\u25b8 ",Object(b.b)("strong",{parentName:"p"},"get"),"<","KeyT, ReturnKeyT\\",">","(",Object(b.b)("inlineCode",{parentName:"p"},"_typeName"),": ",Object(b.b)("em",{parentName:"p"},"string")," ","|"," ",Object(b.b)("a",{parentName:"p",href:"/docs/api/modules/mock#ref"},Object(b.b)("em",{parentName:"a"},"Ref")),"<","KeyT\\",">"," ","|"," ",Object(b.b)("a",{parentName:"p",href:"/docs/api/modules/mock#getargs"},Object(b.b)("em",{parentName:"a"},"GetArgs")),"<","KeyT\\",">",", ",Object(b.b)("inlineCode",{parentName:"p"},"_key?"),": ",Object(b.b)("em",{parentName:"p"},"string")," ","|"," ",Object(b.b)("em",{parentName:"p"},"string"),"[] ","|"," KeyT ","|"," { ","[fieldName: string]",": ",Object(b.b)("em",{parentName:"p"},"any"),";  }, ",Object(b.b)("inlineCode",{parentName:"p"},"_fieldName?"),": ",Object(b.b)("em",{parentName:"p"},"string")," ","|"," ",Object(b.b)("em",{parentName:"p"},"string"),"[] ","|"," { ","[fieldName: string]",": ",Object(b.b)("em",{parentName:"p"},"any"),";  } ","|"," { ","[argName: string]",": ",Object(b.b)("em",{parentName:"p"},"any"),";  }, ",Object(b.b)("inlineCode",{parentName:"p"},"_fieldArgs?"),": ",Object(b.b)("em",{parentName:"p"},"string")," ","|"," { ","[argName: string]",": ",Object(b.b)("em",{parentName:"p"},"any"),";  }): ",Object(b.b)("em",{parentName:"p"},"unknown")),Object(b.b)("p",null,"Get a field value from the store for the given type, key and field\nname \u2014 and optionally field arguments. If the field name is not given,\na reference to the type will be returned."),Object(b.b)("p",null,"If the the value for this field is not set, a value will be\ngenerated according to field return type and mock functions."),Object(b.b)("p",null,"If the field's output type is a ",Object(b.b)("inlineCode",{parentName:"p"},"ObjectType")," (or list of ",Object(b.b)("inlineCode",{parentName:"p"},"ObjectType"),"),\nit will return a ",Object(b.b)("inlineCode",{parentName:"p"},"Ref")," (or array of ",Object(b.b)("inlineCode",{parentName:"p"},"Ref"),"), ie a reference to an entity\nin the store."),Object(b.b)("p",null,"Example:"),Object(b.b)("pre",null,Object(b.b)("code",{parentName:"pre",className:"language-ts"},"store.get('Query', 'ROOT', 'viewer');\n&gt; { $ref: { key: 'abc-737dh-djdjd', typeName: 'User' } }\nstore.get('User', 'abc-737dh-djdjd', 'name')\n&gt; \"Hello World\"\n")),Object(b.b)("h4",{id:"type-parameters"},"Type parameters"),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",{parentName:"tr",align:"left"},"Name"),Object(b.b)("th",{parentName:"tr",align:"left"},"Type"),Object(b.b)("th",{parentName:"tr",align:"left"},"Default"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:"left"},Object(b.b)("inlineCode",{parentName:"td"},"KeyT")),Object(b.b)("td",{parentName:"tr",align:"left"},Object(b.b)("a",{parentName:"td",href:"/docs/api/modules/mock#keytypeconstraints"},Object(b.b)("em",{parentName:"a"},"KeyTypeConstraints"))),Object(b.b)("td",{parentName:"tr",align:"left"},Object(b.b)("em",{parentName:"td"},"string"))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:"left"},Object(b.b)("inlineCode",{parentName:"td"},"ReturnKeyT")),Object(b.b)("td",{parentName:"tr",align:"left"},Object(b.b)("a",{parentName:"td",href:"/docs/api/modules/mock#keytypeconstraints"},Object(b.b)("em",{parentName:"a"},"KeyTypeConstraints"))),Object(b.b)("td",{parentName:"tr",align:"left"},Object(b.b)("em",{parentName:"td"},"string"))))),Object(b.b)("h4",{id:"parameters-1"},"Parameters"),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",{parentName:"tr",align:"left"},"Name"),Object(b.b)("th",{parentName:"tr",align:"left"},"Type"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:"left"},Object(b.b)("inlineCode",{parentName:"td"},"_typeName")),Object(b.b)("td",{parentName:"tr",align:"left"},Object(b.b)("em",{parentName:"td"},"string")," ","|"," ",Object(b.b)("a",{parentName:"td",href:"/docs/api/modules/mock#ref"},Object(b.b)("em",{parentName:"a"},"Ref")),"<","KeyT\\",">"," ","|"," ",Object(b.b)("a",{parentName:"td",href:"/docs/api/modules/mock#getargs"},Object(b.b)("em",{parentName:"a"},"GetArgs")),"<","KeyT\\",">")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:"left"},Object(b.b)("inlineCode",{parentName:"td"},"_key?")),Object(b.b)("td",{parentName:"tr",align:"left"},Object(b.b)("em",{parentName:"td"},"string")," ","|"," ",Object(b.b)("em",{parentName:"td"},"string"),"[] ","|"," KeyT ","|"," { ","[fieldName: string]",": ",Object(b.b)("em",{parentName:"td"},"any"),";  }")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:"left"},Object(b.b)("inlineCode",{parentName:"td"},"_fieldName?")),Object(b.b)("td",{parentName:"tr",align:"left"},Object(b.b)("em",{parentName:"td"},"string")," ","|"," ",Object(b.b)("em",{parentName:"td"},"string"),"[] ","|"," { ","[fieldName: string]",": ",Object(b.b)("em",{parentName:"td"},"any"),";  } ","|"," { ","[argName: string]",": ",Object(b.b)("em",{parentName:"td"},"any"),";  }")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:"left"},Object(b.b)("inlineCode",{parentName:"td"},"_fieldArgs?")),Object(b.b)("td",{parentName:"tr",align:"left"},Object(b.b)("em",{parentName:"td"},"string")," ","|"," { ","[argName: string]",": ",Object(b.b)("em",{parentName:"td"},"any"),";  }")))),Object(b.b)("p",null,Object(b.b)("strong",{parentName:"p"},"Returns:")," ",Object(b.b)("em",{parentName:"p"},"unknown")),Object(b.b)("p",null,"Implementation of: ",Object(b.b)("a",{parentName:"p",href:"/docs/api/interfaces/mock_src.imockstore"},"IMockStore")),Object(b.b)("p",null,"Defined in: ",Object(b.b)("a",{parentName:"p",href:"https://github.com/ardatan/graphql-tools/blob/master/packages/mock/src/MockStore.ts#L72"},"packages/mock/src/MockStore.ts:72")),Object(b.b)("hr",null),Object(b.b)("h3",{id:"reset"},"reset"),Object(b.b)("p",null,"\u25b8 ",Object(b.b)("strong",{parentName:"p"},"reset"),"(): ",Object(b.b)("em",{parentName:"p"},"void")),Object(b.b)("p",null,"Resets the mock store"),Object(b.b)("p",null,Object(b.b)("strong",{parentName:"p"},"Returns:")," ",Object(b.b)("em",{parentName:"p"},"void")),Object(b.b)("p",null,"Implementation of: ",Object(b.b)("a",{parentName:"p",href:"/docs/api/interfaces/mock_src.imockstore"},"IMockStore")),Object(b.b)("p",null,"Defined in: ",Object(b.b)("a",{parentName:"p",href:"https://github.com/ardatan/graphql-tools/blob/master/packages/mock/src/MockStore.ts#L180"},"packages/mock/src/MockStore.ts:180")),Object(b.b)("hr",null),Object(b.b)("h3",{id:"set"},"set"),Object(b.b)("p",null,"\u25b8 ",Object(b.b)("strong",{parentName:"p"},"set"),"<","KeyT\\",">","(",Object(b.b)("inlineCode",{parentName:"p"},"_typeName"),": ",Object(b.b)("em",{parentName:"p"},"string")," ","|"," ",Object(b.b)("a",{parentName:"p",href:"/docs/api/modules/mock#ref"},Object(b.b)("em",{parentName:"a"},"Ref")),"<","KeyT\\",">"," ","|"," ",Object(b.b)("a",{parentName:"p",href:"/docs/api/modules/mock#setargs"},Object(b.b)("em",{parentName:"a"},"SetArgs")),"<","KeyT\\",">",", ",Object(b.b)("inlineCode",{parentName:"p"},"_key?"),": ",Object(b.b)("em",{parentName:"p"},"string")," ","|"," KeyT ","|"," { ","[fieldName: string]",": ",Object(b.b)("em",{parentName:"p"},"any"),";  }, ",Object(b.b)("inlineCode",{parentName:"p"},"_fieldName?"),": ",Object(b.b)("em",{parentName:"p"},"unknown"),", ",Object(b.b)("inlineCode",{parentName:"p"},"_value?"),": ",Object(b.b)("em",{parentName:"p"},"unknown"),"): ",Object(b.b)("em",{parentName:"p"},"void")),Object(b.b)("p",null,"Set a field value in the store for the given type, key and field\nname \u2014 and optionally field arguments."),Object(b.b)("p",null,"If the the field return type is an ",Object(b.b)("inlineCode",{parentName:"p"},"ObjectType")," or a list of\n",Object(b.b)("inlineCode",{parentName:"p"},"ObjectType"),", you can set references to other entity as value:"),Object(b.b)("pre",null,Object(b.b)("code",{parentName:"pre",className:"language-ts"},"// set the viewer name\nstore.set('User', 1, 'name', 'Alexandre);\nstore.set('Query', 'ROOT', 'viewer', store.get('User', 1));\n\n// set the friends of viewer\nstore.set('User', 2, 'name', 'Emily');\nstore.set('User', 3, 'name', 'Caroline');\nstore.set('User', 1, 'friends', [store.get('User', 2), store.get('User', 3)]);\n")),Object(b.b)("p",null,"But it also supports nested set:"),Object(b.b)("pre",null,Object(b.b)("code",{parentName:"pre",className:"language-ts"},"store.set('Query', 'ROOT', 'viewer', {\n name: 'Alexandre',\n friends: [\n   { name: 'Emily' }\n   { name: 'Caroline }\n ]\n});\n")),Object(b.b)("h4",{id:"type-parameters-1"},"Type parameters"),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",{parentName:"tr",align:"left"},"Name"),Object(b.b)("th",{parentName:"tr",align:"left"},"Type"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:"left"},Object(b.b)("inlineCode",{parentName:"td"},"KeyT")),Object(b.b)("td",{parentName:"tr",align:"left"},Object(b.b)("a",{parentName:"td",href:"/docs/api/modules/mock#keytypeconstraints"},Object(b.b)("em",{parentName:"a"},"KeyTypeConstraints")))))),Object(b.b)("h4",{id:"parameters-2"},"Parameters"),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",{parentName:"tr",align:"left"},"Name"),Object(b.b)("th",{parentName:"tr",align:"left"},"Type"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:"left"},Object(b.b)("inlineCode",{parentName:"td"},"_typeName")),Object(b.b)("td",{parentName:"tr",align:"left"},Object(b.b)("em",{parentName:"td"},"string")," ","|"," ",Object(b.b)("a",{parentName:"td",href:"/docs/api/modules/mock#ref"},Object(b.b)("em",{parentName:"a"},"Ref")),"<","KeyT\\",">"," ","|"," ",Object(b.b)("a",{parentName:"td",href:"/docs/api/modules/mock#setargs"},Object(b.b)("em",{parentName:"a"},"SetArgs")),"<","KeyT\\",">")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:"left"},Object(b.b)("inlineCode",{parentName:"td"},"_key?")),Object(b.b)("td",{parentName:"tr",align:"left"},Object(b.b)("em",{parentName:"td"},"string")," ","|"," KeyT ","|"," { ","[fieldName: string]",": ",Object(b.b)("em",{parentName:"td"},"any"),";  }")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:"left"},Object(b.b)("inlineCode",{parentName:"td"},"_fieldName?")),Object(b.b)("td",{parentName:"tr",align:"left"},Object(b.b)("em",{parentName:"td"},"unknown"))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:"left"},Object(b.b)("inlineCode",{parentName:"td"},"_value?")),Object(b.b)("td",{parentName:"tr",align:"left"},Object(b.b)("em",{parentName:"td"},"unknown"))))),Object(b.b)("p",null,Object(b.b)("strong",{parentName:"p"},"Returns:")," ",Object(b.b)("em",{parentName:"p"},"void")),Object(b.b)("p",null,"Implementation of: ",Object(b.b)("a",{parentName:"p",href:"/docs/api/interfaces/mock_src.imockstore"},"IMockStore")),Object(b.b)("p",null,"Defined in: ",Object(b.b)("a",{parentName:"p",href:"https://github.com/ardatan/graphql-tools/blob/master/packages/mock/src/MockStore.ts#L134"},"packages/mock/src/MockStore.ts:134")))}s.isMDXComponent=!0},303:function(e,t,a){"use strict";a.d(t,"a",(function(){return l})),a.d(t,"b",(function(){return O}));var r=a(0),n=a.n(r);function b(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function c(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function m(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?c(Object(a),!0).forEach((function(t){b(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):c(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},b=Object.keys(e);for(r=0;r<b.length;r++)a=b[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var b=Object.getOwnPropertySymbols(e);for(r=0;r<b.length;r++)a=b[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var p=n.a.createContext({}),s=function(e){var t=n.a.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):m(m({},t),e)),a},l=function(e){var t=s(e.components);return n.a.createElement(p.Provider,{value:t},e.children)},i={inlineCode:"code",wrapper:function(e){var t=e.children;return n.a.createElement(n.a.Fragment,{},t)}},d=n.a.forwardRef((function(e,t){var a=e.components,r=e.mdxType,b=e.originalType,c=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),l=s(a),d=r,O=l["".concat(c,".").concat(d)]||l[d]||i[d]||b;return a?n.a.createElement(O,m(m({ref:t},p),{},{components:a})):n.a.createElement(O,m({ref:t},p))}));function O(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var b=a.length,c=new Array(b);c[0]=d;var m={};for(var o in t)hasOwnProperty.call(t,o)&&(m[o]=t[o]);m.originalType=e,m.mdxType="string"==typeof e?e:r,c[1]=m;for(var p=2;p<b;p++)c[p]=a[p];return n.a.createElement.apply(null,c)}return n.a.createElement.apply(null,a)}d.displayName="MDXCreateElement"}}]);