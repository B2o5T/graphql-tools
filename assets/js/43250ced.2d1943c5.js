(window.webpackJsonp=window.webpackJsonp||[]).push([[48],{153:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return c})),a.d(t,"metadata",(function(){return l})),a.d(t,"toc",(function(){return p})),a.d(t,"default",(function(){return i}));var b=a(3),n=a(8),r=(a(0),a(303)),c={id:"mock",title:"@graphql-tools/mock",sidebar_label:"mock"},l={unversionedId:"api/modules/mock",id:"api/modules/mock",isDocsHomePage:!1,title:"@graphql-tools/mock",description:"- MockList",source:"@site/docs/api/modules/mock_src.md",slug:"/api/modules/mock",permalink:"/docs/api/modules/mock",editUrl:"https://github.com/ardatan/graphql-tools/edit/master/website/docs/api/modules/mock_src.md",version:"current",sidebar_label:"mock",sidebar:"someSidebar",previous:{title:"@graphql-tools/merge",permalink:"/docs/api/modules/merge"},next:{title:"@graphql-tools/node-require",permalink:"/docs/api/modules/node-require"}},p=[{value:"Interfaces",id:"interfaces",children:[]},{value:"Type aliases",id:"type-aliases",children:[]},{value:"Variables",id:"variables",children:[]},{value:"Functions",id:"functions",children:[]},{value:"Type aliases",id:"type-aliases-1",children:[{value:"GetArgs",id:"getargs",children:[]},{value:"IMockFn",id:"imockfn",children:[]},{value:"IMocks",id:"imocks",children:[]},{value:"IScalarMock",id:"iscalarmock",children:[]},{value:"ITypeMock",id:"itypemock",children:[]},{value:"KeyTypeConstraints",id:"keytypeconstraints",children:[]},{value:"Ref",id:"ref",children:[]},{value:"SetArgs",id:"setargs",children:[]},{value:"TypePolicy",id:"typepolicy",children:[]}]},{value:"Variables",id:"variables-1",children:[{value:"defaultMocks",id:"defaultmocks",children:[]}]},{value:"Functions",id:"functions-1",children:[{value:"addMocksToSchema",id:"addmockstoschema",children:[]},{value:"assertIsRef",id:"assertisref",children:[]},{value:"createMockStore",id:"createmockstore",children:[]},{value:"deepResolveMockList",id:"deepresolvemocklist",children:[]},{value:"isMockList",id:"ismocklist",children:[]},{value:"isRecord",id:"isrecord",children:[]},{value:"isRef",id:"isref",children:[]},{value:"mockServer",id:"mockserver",children:[]}]}],m={toc:p};function i(e){var t=e.components,a=Object(n.a)(e,["components"]);return Object(r.b)("wrapper",Object(b.a)({},m,a,{components:t,mdxType:"MDXLayout"}),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",{parentName:"li",href:"/docs/api/classes/mock_src.mocklist"},"MockList")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",{parentName:"li",href:"/docs/api/classes/mock_src.mockstore"},"MockStore"))),Object(r.b)("h3",{id:"interfaces"},"Interfaces"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",{parentName:"li",href:"/docs/api/interfaces/mock_src.imockserver"},"IMockServer")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",{parentName:"li",href:"/docs/api/interfaces/mock_src.imockstore"},"IMockStore"))),Object(r.b)("h3",{id:"type-aliases"},"Type aliases"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",{parentName:"li",href:"/docs/api/modules/mock#getargs"},"GetArgs")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",{parentName:"li",href:"/docs/api/modules/mock#imockfn"},"IMockFn")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",{parentName:"li",href:"/docs/api/modules/mock#imocks"},"IMocks")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",{parentName:"li",href:"/docs/api/modules/mock#iscalarmock"},"IScalarMock")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",{parentName:"li",href:"/docs/api/modules/mock#itypemock"},"ITypeMock")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",{parentName:"li",href:"/docs/api/modules/mock#keytypeconstraints"},"KeyTypeConstraints")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",{parentName:"li",href:"/docs/api/modules/mock#ref"},"Ref")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",{parentName:"li",href:"/docs/api/modules/mock#setargs"},"SetArgs")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",{parentName:"li",href:"/docs/api/modules/mock#typepolicy"},"TypePolicy"))),Object(r.b)("h3",{id:"variables"},"Variables"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",{parentName:"li",href:"/docs/api/modules/mock#defaultmocks"},"defaultMocks"))),Object(r.b)("h3",{id:"functions"},"Functions"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",{parentName:"li",href:"/docs/api/modules/mock#addmockstoschema"},"addMocksToSchema")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",{parentName:"li",href:"/docs/api/modules/mock#assertisref"},"assertIsRef")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",{parentName:"li",href:"/docs/api/modules/mock#createmockstore"},"createMockStore")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",{parentName:"li",href:"/docs/api/modules/mock#deepresolvemocklist"},"deepResolveMockList")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",{parentName:"li",href:"/docs/api/modules/mock#ismocklist"},"isMockList")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",{parentName:"li",href:"/docs/api/modules/mock#isrecord"},"isRecord")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",{parentName:"li",href:"/docs/api/modules/mock#isref"},"isRef")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",{parentName:"li",href:"/docs/api/modules/mock#mockserver"},"mockServer"))),Object(r.b)("h2",{id:"type-aliases-1"},"Type aliases"),Object(r.b)("h3",{id:"getargs"},"GetArgs"),Object(r.b)("p",null,"\u01ac ",Object(r.b)("strong",{parentName:"p"},"GetArgs"),"<","KeyT\\",">",": ",Object(r.b)("em",{parentName:"p"},"object")),Object(r.b)("h4",{id:"type-parameters"},"Type parameters"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",{parentName:"tr",align:"left"},"Name"),Object(r.b)("th",{parentName:"tr",align:"left"},"Type"),Object(r.b)("th",{parentName:"tr",align:"left"},"Default"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("inlineCode",{parentName:"td"},"KeyT")),Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("a",{parentName:"td",href:"/docs/api/modules/mock#keytypeconstraints"},Object(r.b)("em",{parentName:"a"},"KeyTypeConstraints"))),Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("em",{parentName:"td"},"string"))))),Object(r.b)("h4",{id:"type-declaration"},"Type declaration"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",{parentName:"tr",align:"left"},"Name"),Object(r.b)("th",{parentName:"tr",align:"left"},"Type"),Object(r.b)("th",{parentName:"tr",align:"left"},"Description"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("inlineCode",{parentName:"td"},"defaultValue?")),Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("em",{parentName:"td"},"unknown")," ","|"," { ","[fieldName: string]",": ",Object(r.b)("em",{parentName:"td"},"any"),";  }"),Object(r.b)("td",{parentName:"tr",align:"left"},"If no value found, insert the ",Object(r.b)("inlineCode",{parentName:"td"},"defaultValue"),".")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("inlineCode",{parentName:"td"},"fieldArgs?")),Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("em",{parentName:"td"},"string")," ","|"," { ","[argName: string]",": ",Object(r.b)("em",{parentName:"td"},"any"),";  }"),Object(r.b)("td",{parentName:"tr",align:"left"},"Optional arguments when querying the field.  Querying the field with the same arguments will return the same value. Deep equality is checked.  ",Object(r.b)("inlineCode",{parentName:"td"},"ts store.get('User', 1, 'friend', { id: 2 }) === store.get('User', 1, 'friend', { id: 2 }) store.get('User', 1, 'friend', { id: 2 }) !== store.get('User', 1, 'friend') "),"  Args can be a record, just like ",Object(r.b)("inlineCode",{parentName:"td"},"args")," argument of field resolver or an arbitrary string.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("inlineCode",{parentName:"td"},"fieldName?")),Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("em",{parentName:"td"},"string")),Object(r.b)("td",{parentName:"tr",align:"left"},"-")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("inlineCode",{parentName:"td"},"key?")),Object(r.b)("td",{parentName:"tr",align:"left"},"KeyT"),Object(r.b)("td",{parentName:"tr",align:"left"},"-")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("inlineCode",{parentName:"td"},"typeName")),Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("em",{parentName:"td"},"string")),Object(r.b)("td",{parentName:"tr",align:"left"},"-")))),Object(r.b)("p",null,"Defined in: ",Object(r.b)("a",{parentName:"p",href:"https://github.com/ardatan/graphql-tools/blob/master/packages/mock/src/types.ts#L23"},"packages/mock/src/types.ts:23")),Object(r.b)("hr",null),Object(r.b)("h3",{id:"imockfn"},"IMockFn"),Object(r.b)("p",null,"\u01ac ",Object(r.b)("strong",{parentName:"p"},"IMockFn"),": () =",">"," ",Object(r.b)("em",{parentName:"p"},"unknown")),Object(r.b)("h4",{id:"type-declaration-1"},"Type declaration"),Object(r.b)("p",null,"\u25b8 (): ",Object(r.b)("em",{parentName:"p"},"unknown")),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Returns:")," ",Object(r.b)("em",{parentName:"p"},"unknown")),Object(r.b)("p",null,"Defined in: ",Object(r.b)("a",{parentName:"p",href:"https://github.com/ardatan/graphql-tools/blob/master/packages/mock/src/types.ts#L3"},"packages/mock/src/types.ts:3")),Object(r.b)("hr",null),Object(r.b)("h3",{id:"imocks"},"IMocks"),Object(r.b)("p",null,"\u01ac ",Object(r.b)("strong",{parentName:"p"},"IMocks"),": ",Object(r.b)("em",{parentName:"p"},"object")),Object(r.b)("h4",{id:"type-declaration-2"},"Type declaration"),Object(r.b)("p",null,"Defined in: ",Object(r.b)("a",{parentName:"p",href:"https://github.com/ardatan/graphql-tools/blob/master/packages/mock/src/types.ts#L7"},"packages/mock/src/types.ts:7")),Object(r.b)("hr",null),Object(r.b)("h3",{id:"iscalarmock"},"IScalarMock"),Object(r.b)("p",null,"\u01ac ",Object(r.b)("strong",{parentName:"p"},"IScalarMock"),": ",Object(r.b)("em",{parentName:"p"},"unknown")," ","|"," ",Object(r.b)("a",{parentName:"p",href:"/docs/api/modules/mock#imockfn"},Object(r.b)("em",{parentName:"a"},"IMockFn"))),Object(r.b)("p",null,"Defined in: ",Object(r.b)("a",{parentName:"p",href:"https://github.com/ardatan/graphql-tools/blob/master/packages/mock/src/types.ts#L4"},"packages/mock/src/types.ts:4")),Object(r.b)("hr",null),Object(r.b)("h3",{id:"itypemock"},"ITypeMock"),Object(r.b)("p",null,"\u01ac ",Object(r.b)("strong",{parentName:"p"},"ITypeMock"),": () =",">"," { ","[fieldName: string]",": ",Object(r.b)("em",{parentName:"p"},"unknown")," ","|"," ",Object(r.b)("a",{parentName:"p",href:"/docs/api/modules/mock#imockfn"},Object(r.b)("em",{parentName:"a"},"IMockFn")),";  } ","|"," { ","[fieldName: string]",": ",Object(r.b)("a",{parentName:"p",href:"/docs/api/modules/mock#imockfn"},Object(r.b)("em",{parentName:"a"},"IMockFn")),";  }"),Object(r.b)("h4",{id:"type-declaration-3"},"Type declaration"),Object(r.b)("p",null,"\u25b8 (): { ","[fieldName: string]",": ",Object(r.b)("em",{parentName:"p"},"unknown")," ","|"," ",Object(r.b)("a",{parentName:"p",href:"/docs/api/modules/mock#imockfn"},Object(r.b)("em",{parentName:"a"},"IMockFn")),";  } ","|"," { ","[fieldName: string]",": ",Object(r.b)("a",{parentName:"p",href:"/docs/api/modules/mock#imockfn"},Object(r.b)("em",{parentName:"a"},"IMockFn")),";  }"),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Returns:")," { ","[fieldName: string]",": ",Object(r.b)("em",{parentName:"p"},"unknown")," ","|"," ",Object(r.b)("a",{parentName:"p",href:"/docs/api/modules/mock#imockfn"},Object(r.b)("em",{parentName:"a"},"IMockFn")),";  } ","|"," { ","[fieldName: string]",": ",Object(r.b)("a",{parentName:"p",href:"/docs/api/modules/mock#imockfn"},Object(r.b)("em",{parentName:"a"},"IMockFn")),";  }"),Object(r.b)("p",null,"Defined in: ",Object(r.b)("a",{parentName:"p",href:"https://github.com/ardatan/graphql-tools/blob/master/packages/mock/src/types.ts#L5"},"packages/mock/src/types.ts:5")),Object(r.b)("hr",null),Object(r.b)("h3",{id:"keytypeconstraints"},"KeyTypeConstraints"),Object(r.b)("p",null,"\u01ac ",Object(r.b)("strong",{parentName:"p"},"KeyTypeConstraints"),": ",Object(r.b)("em",{parentName:"p"},"string")," ","|"," ",Object(r.b)("em",{parentName:"p"},"number")),Object(r.b)("p",null,"Defined in: ",Object(r.b)("a",{parentName:"p",href:"https://github.com/ardatan/graphql-tools/blob/master/packages/mock/src/types.ts#L11"},"packages/mock/src/types.ts:11")),Object(r.b)("hr",null),Object(r.b)("h3",{id:"ref"},"Ref"),Object(r.b)("p",null,"\u01ac ",Object(r.b)("strong",{parentName:"p"},"Ref"),"<","KeyT\\",">",": ",Object(r.b)("em",{parentName:"p"},"object")),Object(r.b)("h4",{id:"type-parameters-1"},"Type parameters"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",{parentName:"tr",align:"left"},"Name"),Object(r.b)("th",{parentName:"tr",align:"left"},"Type"),Object(r.b)("th",{parentName:"tr",align:"left"},"Default"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("inlineCode",{parentName:"td"},"KeyT")),Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("a",{parentName:"td",href:"/docs/api/modules/mock#keytypeconstraints"},Object(r.b)("em",{parentName:"a"},"KeyTypeConstraints"))),Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("em",{parentName:"td"},"string"))))),Object(r.b)("h4",{id:"type-declaration-4"},"Type declaration"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",{parentName:"tr",align:"left"},"Name"),Object(r.b)("th",{parentName:"tr",align:"left"},"Type"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("inlineCode",{parentName:"td"},"$ref")),Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("em",{parentName:"td"},"object"))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("inlineCode",{parentName:"td"},"$ref.key")),Object(r.b)("td",{parentName:"tr",align:"left"},"KeyT")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("inlineCode",{parentName:"td"},"$ref.typeName")),Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("em",{parentName:"td"},"string"))))),Object(r.b)("p",null,"Defined in: ",Object(r.b)("a",{parentName:"p",href:"https://github.com/ardatan/graphql-tools/blob/master/packages/mock/src/types.ts#L185"},"packages/mock/src/types.ts:185")),Object(r.b)("hr",null),Object(r.b)("h3",{id:"setargs"},"SetArgs"),Object(r.b)("p",null,"\u01ac ",Object(r.b)("strong",{parentName:"p"},"SetArgs"),"<","KeyT\\",">",": ",Object(r.b)("em",{parentName:"p"},"object")),Object(r.b)("h4",{id:"type-parameters-2"},"Type parameters"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",{parentName:"tr",align:"left"},"Name"),Object(r.b)("th",{parentName:"tr",align:"left"},"Type"),Object(r.b)("th",{parentName:"tr",align:"left"},"Default"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("inlineCode",{parentName:"td"},"KeyT")),Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("a",{parentName:"td",href:"/docs/api/modules/mock#keytypeconstraints"},Object(r.b)("em",{parentName:"a"},"KeyTypeConstraints"))),Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("em",{parentName:"td"},"string"))))),Object(r.b)("h4",{id:"type-declaration-5"},"Type declaration"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",{parentName:"tr",align:"left"},"Name"),Object(r.b)("th",{parentName:"tr",align:"left"},"Type"),Object(r.b)("th",{parentName:"tr",align:"left"},"Description"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("inlineCode",{parentName:"td"},"fieldArgs?")),Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("em",{parentName:"td"},"string")," ","|"," { ","[argName: string]",": ",Object(r.b)("em",{parentName:"td"},"any"),";  }"),Object(r.b)("td",{parentName:"tr",align:"left"},"Optional arguments when querying the field.  ",Object(r.b)("strong",{parentName:"td"},Object(r.b)("inlineCode",{parentName:"strong"},"see"))," GetArgs#fieldArgs")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("inlineCode",{parentName:"td"},"fieldName?")),Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("em",{parentName:"td"},"string")),Object(r.b)("td",{parentName:"tr",align:"left"},"-")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("inlineCode",{parentName:"td"},"key")),Object(r.b)("td",{parentName:"tr",align:"left"},"KeyT"),Object(r.b)("td",{parentName:"tr",align:"left"},"-")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("inlineCode",{parentName:"td"},"noOverride?")),Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("em",{parentName:"td"},"boolean")),Object(r.b)("td",{parentName:"tr",align:"left"},"If the value for this field is already set, it won't be overridden.  Propagates down do nested ",Object(r.b)("inlineCode",{parentName:"td"},"set"),".")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("inlineCode",{parentName:"td"},"typeName")),Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("em",{parentName:"td"},"string")),Object(r.b)("td",{parentName:"tr",align:"left"},"-")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("inlineCode",{parentName:"td"},"value?")),Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("em",{parentName:"td"},"unknown")," ","|"," { ","[fieldName: string]",": ",Object(r.b)("em",{parentName:"td"},"any"),";  }"),Object(r.b)("td",{parentName:"tr",align:"left"},"-")))),Object(r.b)("p",null,"Defined in: ",Object(r.b)("a",{parentName:"p",href:"https://github.com/ardatan/graphql-tools/blob/master/packages/mock/src/types.ts#L48"},"packages/mock/src/types.ts:48")),Object(r.b)("hr",null),Object(r.b)("h3",{id:"typepolicy"},"TypePolicy"),Object(r.b)("p",null,"\u01ac ",Object(r.b)("strong",{parentName:"p"},"TypePolicy"),": ",Object(r.b)("em",{parentName:"p"},"object")),Object(r.b)("h4",{id:"type-declaration-6"},"Type declaration"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",{parentName:"tr",align:"left"},"Name"),Object(r.b)("th",{parentName:"tr",align:"left"},"Type"),Object(r.b)("th",{parentName:"tr",align:"left"},"Description"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("inlineCode",{parentName:"td"},"keyFieldName?")),Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("em",{parentName:"td"},"string")," ","|"," ",Object(r.b)("inlineCode",{parentName:"td"},"false")),Object(r.b)("td",{parentName:"tr",align:"left"},"The name of the field that should be used as store ",Object(r.b)("inlineCode",{parentName:"td"},"key"),".  If ",Object(r.b)("inlineCode",{parentName:"td"},"false"),", no field will be used and we'll generate a random string as key.")))),Object(r.b)("p",null,"Defined in: ",Object(r.b)("a",{parentName:"p",href:"https://github.com/ardatan/graphql-tools/blob/master/packages/mock/src/types.ts#L13"},"packages/mock/src/types.ts:13")),Object(r.b)("h2",{id:"variables-1"},"Variables"),Object(r.b)("h3",{id:"defaultmocks"},"defaultMocks"),Object(r.b)("p",null,"\u2022 ",Object(r.b)("inlineCode",{parentName:"p"},"Const")," ",Object(r.b)("strong",{parentName:"p"},"defaultMocks"),": ",Object(r.b)("em",{parentName:"p"},"object")),Object(r.b)("h4",{id:"type-declaration-7"},"Type declaration"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",{parentName:"tr",align:"left"},"Name"),Object(r.b)("th",{parentName:"tr",align:"left"},"Type"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("inlineCode",{parentName:"td"},"Boolean")),Object(r.b)("td",{parentName:"tr",align:"left"},"() =",">"," ",Object(r.b)("em",{parentName:"td"},"boolean"))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("inlineCode",{parentName:"td"},"Float")),Object(r.b)("td",{parentName:"tr",align:"left"},"() =",">"," ",Object(r.b)("em",{parentName:"td"},"number"))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("inlineCode",{parentName:"td"},"ID")),Object(r.b)("td",{parentName:"tr",align:"left"},"() =",">"," ",Object(r.b)("em",{parentName:"td"},"string"))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("inlineCode",{parentName:"td"},"Int")),Object(r.b)("td",{parentName:"tr",align:"left"},"() =",">"," ",Object(r.b)("em",{parentName:"td"},"number"))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("inlineCode",{parentName:"td"},"String")),Object(r.b)("td",{parentName:"tr",align:"left"},"() =",">"," ",Object(r.b)("em",{parentName:"td"},"string"))))),Object(r.b)("p",null,"Defined in: ",Object(r.b)("a",{parentName:"p",href:"https://github.com/ardatan/graphql-tools/blob/master/packages/mock/src/MockStore.ts#L35"},"packages/mock/src/MockStore.ts:35")),Object(r.b)("h2",{id:"functions-1"},"Functions"),Object(r.b)("h3",{id:"addmockstoschema"},"addMocksToSchema"),Object(r.b)("p",null,"\u25b8 ",Object(r.b)("strong",{parentName:"p"},"addMocksToSchema"),"(",Object(r.b)("inlineCode",{parentName:"p"},"__namedParameters"),": IMockOptions): GraphQLSchema"),Object(r.b)("p",null,"Given a ",Object(r.b)("inlineCode",{parentName:"p"},"schema")," and a ",Object(r.b)("inlineCode",{parentName:"p"},"MockStore"),", returns an executable schema that\nwill use the provided ",Object(r.b)("inlineCode",{parentName:"p"},"MockStore")," to execute queries."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-ts"},"const schema = buildSchema(`\n type User {\n   id: ID!\n   name: String!\n }\n type Query {\n   me: User!\n }\n`)\n\nconst store = createMockStore({ schema });\nconst mockedSchema = addMocksToSchema({ schema, store });\n")),Object(r.b)("p",null,"If a ",Object(r.b)("inlineCode",{parentName:"p"},"resolvers")," parameter is passed, the query execution will use\nthe provided ",Object(r.b)("inlineCode",{parentName:"p"},"resolvers")," if, one exists, instead of the default mock\nresolver."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-ts"},"const schema = buildSchema(`\n  type User {\n    id: ID!\n    name: String!\n  }\n  type Query {\n    me: User!\n  }\n  type Mutation {\n    setMyName(newName: String!): User!\n  }\n`)\n\nconst store = createMockStore({ schema });\nconst mockedSchema = addMocksToSchema({\n  schema,\n  store,\n  resolvers: {\n    Mutation: {\n      setMyName: (_, { newName }) =&gt; {\n         const ref = store.get('Query', 'ROOT', 'viewer');\n         store.set(ref, 'name', newName);\n         return ref;\n      }\n    }\n  }\n });\n")),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"Query")," and ",Object(r.b)("inlineCode",{parentName:"p"},"Mutation")," type will use ",Object(r.b)("inlineCode",{parentName:"p"},"key")," ",Object(r.b)("inlineCode",{parentName:"p"},"'ROOT'"),"."),Object(r.b)("h4",{id:"parameters"},"Parameters"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",{parentName:"tr",align:"left"},"Name"),Object(r.b)("th",{parentName:"tr",align:"left"},"Type"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("inlineCode",{parentName:"td"},"__namedParameters")),Object(r.b)("td",{parentName:"tr",align:"left"},"IMockOptions")))),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Returns:")," GraphQLSchema"),Object(r.b)("p",null,"Defined in: ",Object(r.b)("a",{parentName:"p",href:"https://github.com/ardatan/graphql-tools/blob/master/packages/mock/src/addMocksToSchema.ts#L93"},"packages/mock/src/addMocksToSchema.ts:93")),Object(r.b)("hr",null),Object(r.b)("h3",{id:"assertisref"},"assertIsRef"),Object(r.b)("p",null,"\u25b8 ",Object(r.b)("strong",{parentName:"p"},"assertIsRef"),"<","KeyT\\",">","(",Object(r.b)("inlineCode",{parentName:"p"},"maybeRef"),": ",Object(r.b)("em",{parentName:"p"},"unknown"),", ",Object(r.b)("inlineCode",{parentName:"p"},"message?"),": ",Object(r.b)("em",{parentName:"p"},"string"),"): asserts maybeRef is Ref","<","KeyT\\",">"),Object(r.b)("h4",{id:"type-parameters-3"},"Type parameters"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",{parentName:"tr",align:"left"},"Name"),Object(r.b)("th",{parentName:"tr",align:"left"},"Type"),Object(r.b)("th",{parentName:"tr",align:"left"},"Default"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("inlineCode",{parentName:"td"},"KeyT")),Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("a",{parentName:"td",href:"/docs/api/modules/mock#keytypeconstraints"},Object(r.b)("em",{parentName:"a"},"KeyTypeConstraints"))),Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("em",{parentName:"td"},"string"))))),Object(r.b)("h4",{id:"parameters-1"},"Parameters"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",{parentName:"tr",align:"left"},"Name"),Object(r.b)("th",{parentName:"tr",align:"left"},"Type"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("inlineCode",{parentName:"td"},"maybeRef")),Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("em",{parentName:"td"},"unknown"))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("inlineCode",{parentName:"td"},"message?")),Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("em",{parentName:"td"},"string"))))),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Returns:")," asserts maybeRef is Ref","<","KeyT\\",">"),Object(r.b)("p",null,"Defined in: ",Object(r.b)("a",{parentName:"p",href:"https://github.com/ardatan/graphql-tools/blob/master/packages/mock/src/types.ts#L196"},"packages/mock/src/types.ts:196")),Object(r.b)("hr",null),Object(r.b)("h3",{id:"createmockstore"},"createMockStore"),Object(r.b)("p",null,"\u25b8 ",Object(r.b)("strong",{parentName:"p"},"createMockStore"),"(",Object(r.b)("inlineCode",{parentName:"p"},"options"),": { ",Object(r.b)("inlineCode",{parentName:"p"},"mocks?"),": ",Object(r.b)("a",{parentName:"p",href:"/docs/api/modules/mock#imocks"},Object(r.b)("em",{parentName:"a"},"IMocks"))," ; ",Object(r.b)("inlineCode",{parentName:"p"},"schema"),": GraphQLSchema ; ",Object(r.b)("inlineCode",{parentName:"p"},"typePolicies?"),": { ","[typeName: string]",": ",Object(r.b)("a",{parentName:"p",href:"/docs/api/modules/mock#typepolicy"},Object(r.b)("em",{parentName:"a"},"TypePolicy")),";  }  }): ",Object(r.b)("a",{parentName:"p",href:"/docs/api/interfaces/mock_src.imockstore"},Object(r.b)("em",{parentName:"a"},"IMockStore"))),Object(r.b)("p",null,"Will create ",Object(r.b)("inlineCode",{parentName:"p"},"MockStore")," for the given ",Object(r.b)("inlineCode",{parentName:"p"},"schema"),"."),Object(r.b)("p",null,"A ",Object(r.b)("inlineCode",{parentName:"p"},"MockStore")," will generate mock values for the given schem when queried."),Object(r.b)("p",null,"It will stores generated mocks, so that, provided with same arguments\nthe returned values will be the same."),Object(r.b)("p",null,"Its API also allows to modify the stored values."),Object(r.b)("p",null,"Basic example:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-ts"},"store.get('User', 1, 'name');\n// &gt; \"Hello World\"\nstore.set('User', 1, 'name', 'Alexandre');\nstore.get('User', 1, 'name');\n// &gt; \"Alexandre\"\n")),Object(r.b)("p",null,'The storage key will correspond to the "key field"\nof the type. Field with name ',Object(r.b)("inlineCode",{parentName:"p"},"id")," or ",Object(r.b)("inlineCode",{parentName:"p"},"_id")," will be\nby default considered as the key field for the type.\nHowever, use ",Object(r.b)("inlineCode",{parentName:"p"},"typePolicies")," to precise the field to use\nas key."),Object(r.b)("h4",{id:"parameters-2"},"Parameters"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",{parentName:"tr",align:"left"},"Name"),Object(r.b)("th",{parentName:"tr",align:"left"},"Type"),Object(r.b)("th",{parentName:"tr",align:"left"},"Description"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("inlineCode",{parentName:"td"},"options")),Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("em",{parentName:"td"},"object")),Object(r.b)("td",{parentName:"tr",align:"left"},"-")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("inlineCode",{parentName:"td"},"options.mocks?")),Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("a",{parentName:"td",href:"/docs/api/modules/mock#imocks"},Object(r.b)("em",{parentName:"a"},"IMocks"))),Object(r.b)("td",{parentName:"tr",align:"left"},"The mocks functions to use.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("inlineCode",{parentName:"td"},"options.schema")),Object(r.b)("td",{parentName:"tr",align:"left"},"GraphQLSchema"),Object(r.b)("td",{parentName:"tr",align:"left"},"The ",Object(r.b)("inlineCode",{parentName:"td"},"schema")," to based mocks on.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("inlineCode",{parentName:"td"},"options.typePolicies?")),Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("em",{parentName:"td"},"object")),Object(r.b)("td",{parentName:"tr",align:"left"},"-")))),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Returns:")," ",Object(r.b)("a",{parentName:"p",href:"/docs/api/interfaces/mock_src.imockstore"},Object(r.b)("em",{parentName:"a"},"IMockStore"))),Object(r.b)("p",null,"Defined in: ",Object(r.b)("a",{parentName:"p",href:"https://github.com/ardatan/graphql-tools/blob/master/packages/mock/src/index.ts#L37"},"packages/mock/src/index.ts:37")),Object(r.b)("hr",null),Object(r.b)("h3",{id:"deepresolvemocklist"},"deepResolveMockList"),Object(r.b)("p",null,"\u25b8 ",Object(r.b)("strong",{parentName:"p"},"deepResolveMockList"),"(",Object(r.b)("inlineCode",{parentName:"p"},"mockList"),": ",Object(r.b)("a",{parentName:"p",href:"/docs/api/classes/mock_src.mocklist"},Object(r.b)("em",{parentName:"a"},"MockList")),"): ",Object(r.b)("em",{parentName:"p"},"unknown"),"[]"),Object(r.b)("h4",{id:"parameters-3"},"Parameters"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",{parentName:"tr",align:"left"},"Name"),Object(r.b)("th",{parentName:"tr",align:"left"},"Type"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("inlineCode",{parentName:"td"},"mockList")),Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("a",{parentName:"td",href:"/docs/api/classes/mock_src.mocklist"},Object(r.b)("em",{parentName:"a"},"MockList")))))),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Returns:")," ",Object(r.b)("em",{parentName:"p"},"unknown"),"[]"),Object(r.b)("p",null,"Defined in: ",Object(r.b)("a",{parentName:"p",href:"https://github.com/ardatan/graphql-tools/blob/master/packages/mock/src/MockList.ts#L69"},"packages/mock/src/MockList.ts:69")),Object(r.b)("hr",null),Object(r.b)("h3",{id:"ismocklist"},"isMockList"),Object(r.b)("p",null,"\u25b8 ",Object(r.b)("strong",{parentName:"p"},"isMockList"),"(",Object(r.b)("inlineCode",{parentName:"p"},"obj"),": ",Object(r.b)("em",{parentName:"p"},"any"),"): obj is MockList"),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},Object(r.b)("inlineCode",{parentName:"strong"},"internal"))),Object(r.b)("h4",{id:"parameters-4"},"Parameters"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",{parentName:"tr",align:"left"},"Name"),Object(r.b)("th",{parentName:"tr",align:"left"},"Type"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("inlineCode",{parentName:"td"},"obj")),Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("em",{parentName:"td"},"any"))))),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Returns:")," obj is MockList"),Object(r.b)("p",null,"Defined in: ",Object(r.b)("a",{parentName:"p",href:"https://github.com/ardatan/graphql-tools/blob/master/packages/mock/src/MockList.ts#L4"},"packages/mock/src/MockList.ts:4")),Object(r.b)("hr",null),Object(r.b)("h3",{id:"isrecord"},"isRecord"),Object(r.b)("p",null,"\u25b8 ",Object(r.b)("strong",{parentName:"p"},"isRecord"),"(",Object(r.b)("inlineCode",{parentName:"p"},"obj"),": ",Object(r.b)("em",{parentName:"p"},"unknown"),"): obj is object"),Object(r.b)("h4",{id:"parameters-5"},"Parameters"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",{parentName:"tr",align:"left"},"Name"),Object(r.b)("th",{parentName:"tr",align:"left"},"Type"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("inlineCode",{parentName:"td"},"obj")),Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("em",{parentName:"td"},"unknown"))))),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Returns:")," obj is object"),Object(r.b)("p",null,"Defined in: ",Object(r.b)("a",{parentName:"p",href:"https://github.com/ardatan/graphql-tools/blob/master/packages/mock/src/types.ts#L205"},"packages/mock/src/types.ts:205")),Object(r.b)("hr",null),Object(r.b)("h3",{id:"isref"},"isRef"),Object(r.b)("p",null,"\u25b8 ",Object(r.b)("strong",{parentName:"p"},"isRef"),"<","KeyT\\",">","(",Object(r.b)("inlineCode",{parentName:"p"},"maybeRef"),": ",Object(r.b)("em",{parentName:"p"},"unknown"),"): maybeRef is Ref","<","KeyT\\",">"),Object(r.b)("h4",{id:"type-parameters-4"},"Type parameters"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",{parentName:"tr",align:"left"},"Name"),Object(r.b)("th",{parentName:"tr",align:"left"},"Type"),Object(r.b)("th",{parentName:"tr",align:"left"},"Default"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("inlineCode",{parentName:"td"},"KeyT")),Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("a",{parentName:"td",href:"/docs/api/modules/mock#keytypeconstraints"},Object(r.b)("em",{parentName:"a"},"KeyTypeConstraints"))),Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("em",{parentName:"td"},"string"))))),Object(r.b)("h4",{id:"parameters-6"},"Parameters"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",{parentName:"tr",align:"left"},"Name"),Object(r.b)("th",{parentName:"tr",align:"left"},"Type"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("inlineCode",{parentName:"td"},"maybeRef")),Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("em",{parentName:"td"},"unknown"))))),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Returns:")," maybeRef is Ref","<","KeyT\\",">"),Object(r.b)("p",null,"Defined in: ",Object(r.b)("a",{parentName:"p",href:"https://github.com/ardatan/graphql-tools/blob/master/packages/mock/src/types.ts#L192"},"packages/mock/src/types.ts:192")),Object(r.b)("hr",null),Object(r.b)("h3",{id:"mockserver"},"mockServer"),Object(r.b)("p",null,"\u25b8 ",Object(r.b)("strong",{parentName:"p"},"mockServer"),"(",Object(r.b)("inlineCode",{parentName:"p"},"schema"),": GraphQLSchema ","|"," ",Object(r.b)("a",{parentName:"p",href:"/docs/api/modules/utils#itypedefinitions"},Object(r.b)("em",{parentName:"a"},"ITypeDefinitions")),", ",Object(r.b)("inlineCode",{parentName:"p"},"mocks"),": ",Object(r.b)("a",{parentName:"p",href:"/docs/api/modules/mock#imocks"},Object(r.b)("em",{parentName:"a"},"IMocks")),", ",Object(r.b)("inlineCode",{parentName:"p"},"preserveResolvers?"),": ",Object(r.b)("em",{parentName:"p"},"boolean"),"): ",Object(r.b)("a",{parentName:"p",href:"/docs/api/interfaces/mock_src.imockserver"},Object(r.b)("em",{parentName:"a"},"IMockServer"))),Object(r.b)("p",null,"A convenience wrapper on top of addMocksToSchema. It adds your mock resolvers\nto your schema and returns a client that will correctly execute your query with\nvariables. Note: when executing queries from the returned server, context and\nroot will both equal ",Object(r.b)("inlineCode",{parentName:"p"},"{}"),"."),Object(r.b)("h4",{id:"parameters-7"},"Parameters"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",{parentName:"tr",align:"left"},"Name"),Object(r.b)("th",{parentName:"tr",align:"left"},"Type"),Object(r.b)("th",{parentName:"tr",align:"left"},"Default value"),Object(r.b)("th",{parentName:"tr",align:"left"},"Description"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("inlineCode",{parentName:"td"},"schema")),Object(r.b)("td",{parentName:"tr",align:"left"},"GraphQLSchema ","|"," ",Object(r.b)("a",{parentName:"td",href:"/docs/api/modules/utils#itypedefinitions"},Object(r.b)("em",{parentName:"a"},"ITypeDefinitions"))),Object(r.b)("td",{parentName:"tr",align:"left"},"-"),Object(r.b)("td",{parentName:"tr",align:"left"},"The schema to which to add mocks. This can also be a set of type definitions instead.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("inlineCode",{parentName:"td"},"mocks")),Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("a",{parentName:"td",href:"/docs/api/modules/mock#imocks"},Object(r.b)("em",{parentName:"a"},"IMocks"))),Object(r.b)("td",{parentName:"tr",align:"left"},"-"),Object(r.b)("td",{parentName:"tr",align:"left"},"The mocks to add to the schema.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("inlineCode",{parentName:"td"},"preserveResolvers")),Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("em",{parentName:"td"},"boolean")),Object(r.b)("td",{parentName:"tr",align:"left"},"false"),Object(r.b)("td",{parentName:"tr",align:"left"},"Set to ",Object(r.b)("inlineCode",{parentName:"td"},"true")," to prevent existing resolvers from being overwritten to provide mock data. This can be used to mock some parts of the server and not others.")))),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Returns:")," ",Object(r.b)("a",{parentName:"p",href:"/docs/api/interfaces/mock_src.imockserver"},Object(r.b)("em",{parentName:"a"},"IMockServer"))),Object(r.b)("p",null,"Defined in: ",Object(r.b)("a",{parentName:"p",href:"https://github.com/ardatan/graphql-tools/blob/master/packages/mock/src/mockServer.ts#L19"},"packages/mock/src/mockServer.ts:19")))}i.isMDXComponent=!0},303:function(e,t,a){"use strict";a.d(t,"a",(function(){return o})),a.d(t,"b",(function(){return j}));var b=a(0),n=a.n(b);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function c(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var b=Object.getOwnPropertySymbols(e);t&&(b=b.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,b)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?c(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):c(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function p(e,t){if(null==e)return{};var a,b,n=function(e,t){if(null==e)return{};var a,b,n={},r=Object.keys(e);for(b=0;b<r.length;b++)a=r[b],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(b=0;b<r.length;b++)a=r[b],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var m=n.a.createContext({}),i=function(e){var t=n.a.useContext(m),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},o=function(e){var t=i(e.components);return n.a.createElement(m.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return n.a.createElement(n.a.Fragment,{},t)}},d=n.a.forwardRef((function(e,t){var a=e.components,b=e.mdxType,r=e.originalType,c=e.parentName,m=p(e,["components","mdxType","originalType","parentName"]),o=i(a),d=b,j=o["".concat(c,".").concat(d)]||o[d]||s[d]||r;return a?n.a.createElement(j,l(l({ref:t},m),{},{components:a})):n.a.createElement(j,l({ref:t},m))}));function j(e,t){var a=arguments,b=t&&t.mdxType;if("string"==typeof e||b){var r=a.length,c=new Array(r);c[0]=d;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:b,c[1]=l;for(var m=2;m<r;m++)c[m]=a[m];return n.a.createElement.apply(null,c)}return n.a.createElement.apply(null,a)}d.displayName="MDXCreateElement"}}]);