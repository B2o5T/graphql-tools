(self.webpackChunk_graphql_tools_website=self.webpackChunk_graphql_tools_website||[]).push([[1173],{5318:function(e,t,a){"use strict";a.d(t,{Zo:function(){return d},kt:function(){return c}});var n=a(7378);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function p(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var o=n.createContext({}),k=function(e){var t=n.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},d=function(e){var t=k(e.components);return n.createElement(o.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},s=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,o=e.parentName,d=p(e,["components","mdxType","originalType","parentName"]),s=k(a),c=r,N=s["".concat(o,".").concat(c)]||s[c]||m[c]||l;return a?n.createElement(N,i(i({ref:t},d),{},{components:a})):n.createElement(N,i({ref:t},d))}));function c(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,i=new Array(l);i[0]=s;var p={};for(var o in t)hasOwnProperty.call(t,o)&&(p[o]=t[o]);p.originalType=e,p.mdxType="string"==typeof e?e:r,i[1]=p;for(var k=2;k<l;k++)i[k]=a[k];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}s.displayName="MDXCreateElement"},3220:function(e,t,a){"use strict";a.r(t),a.d(t,{frontMatter:function(){return p},metadata:function(){return o},toc:function(){return k},default:function(){return m}});var n=a(9603),r=a(120),l=(a(7378),a(5318)),i=["components"],p={id:"mock",title:"@graphql-tools/mock",sidebar_label:"mock"},o={unversionedId:"api/modules/mock",id:"api/modules/mock",isDocsHomePage:!1,title:"@graphql-tools/mock",description:"- MockList",source:"@site/docs/api/modules/mock_src.md",sourceDirName:"api/modules",slug:"/api/modules/mock",permalink:"/docs/api/modules/mock",editUrl:"https://github.com/ardatan/graphql-tools/edit/master/website/docs/api/modules/mock_src.md",version:"current",sidebar_label:"mock",frontMatter:{id:"mock",title:"@graphql-tools/mock",sidebar_label:"mock"},sidebar:"someSidebar",previous:{title:"@graphql-tools/merge",permalink:"/docs/api/modules/merge"},next:{title:"@graphql-tools/node-require",permalink:"/docs/api/modules/node-require"}},k=[{value:"Interfaces",id:"interfaces",children:[]},{value:"Type aliases",id:"type-aliases",children:[]},{value:"Variables",id:"variables",children:[]},{value:"Functions",id:"functions",children:[]},{value:"Type aliases",id:"type-aliases-1",children:[{value:"GetArgs",id:"getargs",children:[]},{value:"IMockFn",id:"imockfn",children:[]},{value:"IMocks",id:"imocks",children:[]},{value:"IScalarMock",id:"iscalarmock",children:[]},{value:"ITypeMock",id:"itypemock",children:[]},{value:"KeyTypeConstraints",id:"keytypeconstraints",children:[]},{value:"Ref",id:"ref",children:[]},{value:"SetArgs",id:"setargs",children:[]},{value:"TypePolicy",id:"typepolicy",children:[]}]},{value:"Variables",id:"variables-1",children:[{value:"defaultMocks",id:"defaultmocks",children:[]}]},{value:"Functions",id:"functions-1",children:[{value:"addMocksToSchema",id:"addmockstoschema",children:[]},{value:"assertIsRef",id:"assertisref",children:[]},{value:"createMockStore",id:"createmockstore",children:[]},{value:"deepResolveMockList",id:"deepresolvemocklist",children:[]},{value:"isMockList",id:"ismocklist",children:[]},{value:"isRecord",id:"isrecord",children:[]},{value:"isRef",id:"isref",children:[]},{value:"mockServer",id:"mockserver",children:[]}]}],d={toc:k};function m(e){var t=e.components,a=(0,r.Z)(e,i);return(0,l.kt)("wrapper",(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/docs/api/classes/mock_src.mocklist"},"MockList")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/docs/api/classes/mock_src.mockstore"},"MockStore"))),(0,l.kt)("h3",{id:"interfaces"},"Interfaces"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/docs/api/interfaces/mock_src.imockserver"},"IMockServer")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/docs/api/interfaces/mock_src.imockstore"},"IMockStore"))),(0,l.kt)("h3",{id:"type-aliases"},"Type aliases"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/docs/api/modules/mock#getargs"},"GetArgs")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/docs/api/modules/mock#imockfn"},"IMockFn")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/docs/api/modules/mock#imocks"},"IMocks")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/docs/api/modules/mock#iscalarmock"},"IScalarMock")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/docs/api/modules/mock#itypemock"},"ITypeMock")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/docs/api/modules/mock#keytypeconstraints"},"KeyTypeConstraints")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/docs/api/modules/mock#ref"},"Ref")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/docs/api/modules/mock#setargs"},"SetArgs")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/docs/api/modules/mock#typepolicy"},"TypePolicy"))),(0,l.kt)("h3",{id:"variables"},"Variables"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/docs/api/modules/mock#defaultmocks"},"defaultMocks"))),(0,l.kt)("h3",{id:"functions"},"Functions"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/docs/api/modules/mock#addmockstoschema"},"addMocksToSchema")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/docs/api/modules/mock#assertisref"},"assertIsRef")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/docs/api/modules/mock#createmockstore"},"createMockStore")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/docs/api/modules/mock#deepresolvemocklist"},"deepResolveMockList")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/docs/api/modules/mock#ismocklist"},"isMockList")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/docs/api/modules/mock#isrecord"},"isRecord")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/docs/api/modules/mock#isref"},"isRef")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/docs/api/modules/mock#mockserver"},"mockServer"))),(0,l.kt)("h2",{id:"type-aliases-1"},"Type aliases"),(0,l.kt)("h3",{id:"getargs"},"GetArgs"),(0,l.kt)("p",null,"\u01ac ",(0,l.kt)("strong",{parentName:"p"},"GetArgs"),"<","KeyT\\",">",": ",(0,l.kt)("inlineCode",{parentName:"p"},"Object")),(0,l.kt)("h4",{id:"type-parameters"},"Type parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"KeyT")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"KeyT"),": ",(0,l.kt)("a",{parentName:"td",href:"/docs/api/modules/mock#keytypeconstraints"},"KeyTypeConstraints")," = ",(0,l.kt)("inlineCode",{parentName:"td"},"string"))))),(0,l.kt)("h4",{id:"type-declaration"},"Type declaration"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"defaultValue?")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"unknown")," ","|"," { ","[fieldName: string]",": ",(0,l.kt)("inlineCode",{parentName:"td"},"any"),";  }"),(0,l.kt)("td",{parentName:"tr",align:"left"},"If no value found, insert the ",(0,l.kt)("inlineCode",{parentName:"td"},"defaultValue"),".")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"fieldArgs?")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"string")," ","|"," { ","[argName: string]",": ",(0,l.kt)("inlineCode",{parentName:"td"},"any"),";  }"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Optional arguments when querying the field.  Querying the field with the same arguments will return the same value. Deep equality is checked.  ",(0,l.kt)("inlineCode",{parentName:"td"},"ts store.get('User', 1, 'friend', { id: 2 }) === store.get('User', 1, 'friend', { id: 2 }) store.get('User', 1, 'friend', { id: 2 }) !== store.get('User', 1, 'friend') "),"  Args can be a record, just like ",(0,l.kt)("inlineCode",{parentName:"td"},"args")," argument of field resolver or an arbitrary string.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"fieldName?")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"string")),(0,l.kt)("td",{parentName:"tr",align:"left"},"-")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"key?")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"KeyT")),(0,l.kt)("td",{parentName:"tr",align:"left"},"-")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"typeName")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"string")),(0,l.kt)("td",{parentName:"tr",align:"left"},"-")))),(0,l.kt)("h4",{id:"defined-in"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/ardatan/graphql-tools/blob/master/packages/mock/src/types.ts#L23"},"packages/mock/src/types.ts:23")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"imockfn"},"IMockFn"),(0,l.kt)("p",null,"\u01ac ",(0,l.kt)("strong",{parentName:"p"},"IMockFn"),": () =",">"," ",(0,l.kt)("inlineCode",{parentName:"p"},"unknown")),(0,l.kt)("h4",{id:"type-declaration-1"},"Type declaration"),(0,l.kt)("p",null,"\u25b8 (): ",(0,l.kt)("inlineCode",{parentName:"p"},"unknown")),(0,l.kt)("h5",{id:"returns"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"unknown")),(0,l.kt)("h4",{id:"defined-in-1"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/ardatan/graphql-tools/blob/master/packages/mock/src/types.ts#L3"},"packages/mock/src/types.ts:3")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"imocks"},"IMocks"),(0,l.kt)("p",null,"\u01ac ",(0,l.kt)("strong",{parentName:"p"},"IMocks"),": ",(0,l.kt)("inlineCode",{parentName:"p"},"Object")),(0,l.kt)("h4",{id:"index-signature"},"Index signature"),(0,l.kt)("p",null,"\u25aa ","[typeOrScalarName: ",(0,l.kt)("inlineCode",{parentName:"p"},"string"),"]",": ",(0,l.kt)("a",{parentName:"p",href:"/docs/api/modules/mock#iscalarmock"},"IScalarMock")," ","|"," ",(0,l.kt)("a",{parentName:"p",href:"/docs/api/modules/mock#itypemock"},"ITypeMock")),(0,l.kt)("h4",{id:"defined-in-2"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/ardatan/graphql-tools/blob/master/packages/mock/src/types.ts#L7"},"packages/mock/src/types.ts:7")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"iscalarmock"},"IScalarMock"),(0,l.kt)("p",null,"\u01ac ",(0,l.kt)("strong",{parentName:"p"},"IScalarMock"),": ",(0,l.kt)("inlineCode",{parentName:"p"},"unknown")," ","|"," ",(0,l.kt)("a",{parentName:"p",href:"/docs/api/modules/mock#imockfn"},"IMockFn")),(0,l.kt)("h4",{id:"defined-in-3"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/ardatan/graphql-tools/blob/master/packages/mock/src/types.ts#L4"},"packages/mock/src/types.ts:4")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"itypemock"},"ITypeMock"),(0,l.kt)("p",null,"\u01ac ",(0,l.kt)("strong",{parentName:"p"},"ITypeMock"),": () =",">"," { ","[fieldName: string]",": ",(0,l.kt)("inlineCode",{parentName:"p"},"unknown")," ","|"," ",(0,l.kt)("a",{parentName:"p",href:"/docs/api/modules/mock#imockfn"},"IMockFn"),";  } ","|"," { ","[fieldName: string]",": ",(0,l.kt)("a",{parentName:"p",href:"/docs/api/modules/mock#imockfn"},"IMockFn"),";  }"),(0,l.kt)("h4",{id:"type-declaration-2"},"Type declaration"),(0,l.kt)("p",null,"\u25b8 (): { ","[fieldName: string]",": ",(0,l.kt)("inlineCode",{parentName:"p"},"unknown")," ","|"," ",(0,l.kt)("a",{parentName:"p",href:"/docs/api/modules/mock#imockfn"},"IMockFn"),";  } ","|"," { ","[fieldName: string]",": ",(0,l.kt)("a",{parentName:"p",href:"/docs/api/modules/mock#imockfn"},"IMockFn"),";  }"),(0,l.kt)("h5",{id:"returns-1"},"Returns"),(0,l.kt)("p",null,"{ ","[fieldName: string]",": ",(0,l.kt)("inlineCode",{parentName:"p"},"unknown")," ","|"," ",(0,l.kt)("a",{parentName:"p",href:"/docs/api/modules/mock#imockfn"},"IMockFn"),";  } ","|"," { ","[fieldName: string]",": ",(0,l.kt)("a",{parentName:"p",href:"/docs/api/modules/mock#imockfn"},"IMockFn"),";  }"),(0,l.kt)("h4",{id:"defined-in-4"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/ardatan/graphql-tools/blob/master/packages/mock/src/types.ts#L5"},"packages/mock/src/types.ts:5")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"keytypeconstraints"},"KeyTypeConstraints"),(0,l.kt)("p",null,"\u01ac ",(0,l.kt)("strong",{parentName:"p"},"KeyTypeConstraints"),": ",(0,l.kt)("inlineCode",{parentName:"p"},"string")," ","|"," ",(0,l.kt)("inlineCode",{parentName:"p"},"number")),(0,l.kt)("h4",{id:"defined-in-5"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/ardatan/graphql-tools/blob/master/packages/mock/src/types.ts#L11"},"packages/mock/src/types.ts:11")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"ref"},"Ref"),(0,l.kt)("p",null,"\u01ac ",(0,l.kt)("strong",{parentName:"p"},"Ref"),"<","KeyT\\",">",": ",(0,l.kt)("inlineCode",{parentName:"p"},"Object")),(0,l.kt)("h4",{id:"type-parameters-1"},"Type parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"KeyT")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"KeyT"),": ",(0,l.kt)("a",{parentName:"td",href:"/docs/api/modules/mock#keytypeconstraints"},"KeyTypeConstraints")," = ",(0,l.kt)("inlineCode",{parentName:"td"},"string"))))),(0,l.kt)("h4",{id:"type-declaration-3"},"Type declaration"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"$ref")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"Object"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"$ref.key")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"KeyT"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"$ref.typeName")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"string"))))),(0,l.kt)("h4",{id:"defined-in-6"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/ardatan/graphql-tools/blob/master/packages/mock/src/types.ts#L185"},"packages/mock/src/types.ts:185")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"setargs"},"SetArgs"),(0,l.kt)("p",null,"\u01ac ",(0,l.kt)("strong",{parentName:"p"},"SetArgs"),"<","KeyT\\",">",": ",(0,l.kt)("inlineCode",{parentName:"p"},"Object")),(0,l.kt)("h4",{id:"type-parameters-2"},"Type parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"KeyT")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"KeyT"),": ",(0,l.kt)("a",{parentName:"td",href:"/docs/api/modules/mock#keytypeconstraints"},"KeyTypeConstraints")," = ",(0,l.kt)("inlineCode",{parentName:"td"},"string"))))),(0,l.kt)("h4",{id:"type-declaration-4"},"Type declaration"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"fieldArgs?")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"string")," ","|"," { ","[argName: string]",": ",(0,l.kt)("inlineCode",{parentName:"td"},"any"),";  }"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Optional arguments when querying the field.  ",(0,l.kt)("strong",{parentName:"td"},(0,l.kt)("inlineCode",{parentName:"strong"},"see"))," GetArgs#fieldArgs")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"fieldName?")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"string")),(0,l.kt)("td",{parentName:"tr",align:"left"},"-")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"key")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"KeyT")),(0,l.kt)("td",{parentName:"tr",align:"left"},"-")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"noOverride?")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"boolean")),(0,l.kt)("td",{parentName:"tr",align:"left"},"If the value for this field is already set, it won't be overridden.  Propagates down do nested ",(0,l.kt)("inlineCode",{parentName:"td"},"set"),".")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"typeName")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"string")),(0,l.kt)("td",{parentName:"tr",align:"left"},"-")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"value?")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"unknown")," ","|"," { ","[fieldName: string]",": ",(0,l.kt)("inlineCode",{parentName:"td"},"any"),";  }"),(0,l.kt)("td",{parentName:"tr",align:"left"},"-")))),(0,l.kt)("h4",{id:"defined-in-7"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/ardatan/graphql-tools/blob/master/packages/mock/src/types.ts#L48"},"packages/mock/src/types.ts:48")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"typepolicy"},"TypePolicy"),(0,l.kt)("p",null,"\u01ac ",(0,l.kt)("strong",{parentName:"p"},"TypePolicy"),": ",(0,l.kt)("inlineCode",{parentName:"p"},"Object")),(0,l.kt)("h4",{id:"type-declaration-5"},"Type declaration"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"keyFieldName?")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"string")," ","|"," ",(0,l.kt)("inlineCode",{parentName:"td"},"false")),(0,l.kt)("td",{parentName:"tr",align:"left"},"The name of the field that should be used as store ",(0,l.kt)("inlineCode",{parentName:"td"},"key"),".  If ",(0,l.kt)("inlineCode",{parentName:"td"},"false"),", no field will be used and we'll generate a random string as key.")))),(0,l.kt)("h4",{id:"defined-in-8"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/ardatan/graphql-tools/blob/master/packages/mock/src/types.ts#L13"},"packages/mock/src/types.ts:13")),(0,l.kt)("h2",{id:"variables-1"},"Variables"),(0,l.kt)("h3",{id:"defaultmocks"},"defaultMocks"),(0,l.kt)("p",null,"\u2022 ",(0,l.kt)("inlineCode",{parentName:"p"},"Const")," ",(0,l.kt)("strong",{parentName:"p"},"defaultMocks"),": ",(0,l.kt)("inlineCode",{parentName:"p"},"Object")),(0,l.kt)("h4",{id:"type-declaration-6"},"Type declaration"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"Boolean")),(0,l.kt)("td",{parentName:"tr",align:"left"},"() =",">"," ",(0,l.kt)("inlineCode",{parentName:"td"},"boolean"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"Float")),(0,l.kt)("td",{parentName:"tr",align:"left"},"() =",">"," ",(0,l.kt)("inlineCode",{parentName:"td"},"number"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"ID")),(0,l.kt)("td",{parentName:"tr",align:"left"},"() =",">"," ",(0,l.kt)("inlineCode",{parentName:"td"},"string"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"Int")),(0,l.kt)("td",{parentName:"tr",align:"left"},"() =",">"," ",(0,l.kt)("inlineCode",{parentName:"td"},"number"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"String")),(0,l.kt)("td",{parentName:"tr",align:"left"},"() =",">"," ",(0,l.kt)("inlineCode",{parentName:"td"},"string"))))),(0,l.kt)("h4",{id:"defined-in-9"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/ardatan/graphql-tools/blob/master/packages/mock/src/MockStore.ts#L35"},"packages/mock/src/MockStore.ts:35")),(0,l.kt)("h2",{id:"functions-1"},"Functions"),(0,l.kt)("h3",{id:"addmockstoschema"},"addMocksToSchema"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("strong",{parentName:"p"},"addMocksToSchema"),"(",(0,l.kt)("inlineCode",{parentName:"p"},"__namedParameters"),"): ",(0,l.kt)("inlineCode",{parentName:"p"},"GraphQLSchema")),(0,l.kt)("p",null,"Given a ",(0,l.kt)("inlineCode",{parentName:"p"},"schema")," and a ",(0,l.kt)("inlineCode",{parentName:"p"},"MockStore"),", returns an executable schema that\nwill use the provided ",(0,l.kt)("inlineCode",{parentName:"p"},"MockStore")," to execute queries."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"const schema = buildSchema(`\n type User {\n   id: ID!\n   name: String!\n }\n type Query {\n   me: User!\n }\n`)\n\nconst store = createMockStore({ schema });\nconst mockedSchema = addMocksToSchema({ schema, store });\n")),(0,l.kt)("p",null,"If a ",(0,l.kt)("inlineCode",{parentName:"p"},"resolvers")," parameter is passed, the query execution will use\nthe provided ",(0,l.kt)("inlineCode",{parentName:"p"},"resolvers")," if, one exists, instead of the default mock\nresolver."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"const schema = buildSchema(`\n  type User {\n    id: ID!\n    name: String!\n  }\n  type Query {\n    me: User!\n  }\n  type Mutation {\n    setMyName(newName: String!): User!\n  }\n`)\n\nconst store = createMockStore({ schema });\nconst mockedSchema = addMocksToSchema({\n  schema,\n  store,\n  resolvers: {\n    Mutation: {\n      setMyName: (_, { newName }) =&gt; {\n         const ref = store.get('Query', 'ROOT', 'viewer');\n         store.set(ref, 'name', newName);\n         return ref;\n      }\n    }\n  }\n });\n")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"Query")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"Mutation")," type will use ",(0,l.kt)("inlineCode",{parentName:"p"},"key")," ",(0,l.kt)("inlineCode",{parentName:"p"},"'ROOT'"),"."),(0,l.kt)("h4",{id:"parameters"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"__namedParameters")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"IMockOptions"))))),(0,l.kt)("h4",{id:"returns-2"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"GraphQLSchema")),(0,l.kt)("h4",{id:"defined-in-10"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/ardatan/graphql-tools/blob/master/packages/mock/src/addMocksToSchema.ts#L93"},"packages/mock/src/addMocksToSchema.ts:93")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"assertisref"},"assertIsRef"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("strong",{parentName:"p"},"assertIsRef"),"<","KeyT\\",">","(",(0,l.kt)("inlineCode",{parentName:"p"},"maybeRef"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"message?"),"): asserts maybeRef is Ref","<","KeyT\\",">"),(0,l.kt)("h4",{id:"type-parameters-3"},"Type parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"KeyT")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"KeyT"),": ",(0,l.kt)("a",{parentName:"td",href:"/docs/api/modules/mock#keytypeconstraints"},"KeyTypeConstraints")," = ",(0,l.kt)("inlineCode",{parentName:"td"},"string"))))),(0,l.kt)("h4",{id:"parameters-1"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"maybeRef")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"unknown"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"message?")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"string"))))),(0,l.kt)("h4",{id:"returns-3"},"Returns"),(0,l.kt)("p",null,"asserts maybeRef is Ref","<","KeyT\\",">"),(0,l.kt)("h4",{id:"defined-in-11"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/ardatan/graphql-tools/blob/master/packages/mock/src/types.ts#L196"},"packages/mock/src/types.ts:196")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"createmockstore"},"createMockStore"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("strong",{parentName:"p"},"createMockStore"),"(",(0,l.kt)("inlineCode",{parentName:"p"},"options"),"): ",(0,l.kt)("a",{parentName:"p",href:"/docs/api/interfaces/mock_src.imockstore"},"IMockStore")),(0,l.kt)("p",null,"Will create ",(0,l.kt)("inlineCode",{parentName:"p"},"MockStore")," for the given ",(0,l.kt)("inlineCode",{parentName:"p"},"schema"),"."),(0,l.kt)("p",null,"A ",(0,l.kt)("inlineCode",{parentName:"p"},"MockStore")," will generate mock values for the given schem when queried."),(0,l.kt)("p",null,"It will stores generated mocks, so that, provided with same arguments\nthe returned values will be the same."),(0,l.kt)("p",null,"Its API also allows to modify the stored values."),(0,l.kt)("p",null,"Basic example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"store.get('User', 1, 'name');\n// &gt; \"Hello World\"\nstore.set('User', 1, 'name', 'Alexandre');\nstore.get('User', 1, 'name');\n// &gt; \"Alexandre\"\n")),(0,l.kt)("p",null,'The storage key will correspond to the "key field"\nof the type. Field with name ',(0,l.kt)("inlineCode",{parentName:"p"},"id")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"_id")," will be\nby default considered as the key field for the type.\nHowever, use ",(0,l.kt)("inlineCode",{parentName:"p"},"typePolicies")," to precise the field to use\nas key."),(0,l.kt)("h4",{id:"parameters-2"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"options")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"Object")),(0,l.kt)("td",{parentName:"tr",align:"left"},"-")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"options.mocks?")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("a",{parentName:"td",href:"/docs/api/modules/mock#imocks"},"IMocks")),(0,l.kt)("td",{parentName:"tr",align:"left"},"The mocks functions to use.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"options.schema")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"GraphQLSchema")),(0,l.kt)("td",{parentName:"tr",align:"left"},"The ",(0,l.kt)("inlineCode",{parentName:"td"},"schema")," to based mocks on.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"options.typePolicies?")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"Object")),(0,l.kt)("td",{parentName:"tr",align:"left"},"-")))),(0,l.kt)("h4",{id:"returns-4"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"/docs/api/interfaces/mock_src.imockstore"},"IMockStore")),(0,l.kt)("h4",{id:"defined-in-12"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/ardatan/graphql-tools/blob/master/packages/mock/src/index.ts#L37"},"packages/mock/src/index.ts:37")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"deepresolvemocklist"},"deepResolveMockList"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("strong",{parentName:"p"},"deepResolveMockList"),"(",(0,l.kt)("inlineCode",{parentName:"p"},"mockList"),"): ",(0,l.kt)("inlineCode",{parentName:"p"},"unknown"),"[]"),(0,l.kt)("h4",{id:"parameters-3"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"mockList")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("a",{parentName:"td",href:"/docs/api/classes/mock_src.mocklist"},"MockList"))))),(0,l.kt)("h4",{id:"returns-5"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"unknown"),"[]"),(0,l.kt)("h4",{id:"defined-in-13"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/ardatan/graphql-tools/blob/master/packages/mock/src/MockList.ts#L69"},"packages/mock/src/MockList.ts:69")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"ismocklist"},"isMockList"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("strong",{parentName:"p"},"isMockList"),"(",(0,l.kt)("inlineCode",{parentName:"p"},"obj"),"): obj is MockList"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"internal"))),(0,l.kt)("h4",{id:"parameters-4"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"obj")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"any"))))),(0,l.kt)("h4",{id:"returns-6"},"Returns"),(0,l.kt)("p",null,"obj is MockList"),(0,l.kt)("h4",{id:"defined-in-14"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/ardatan/graphql-tools/blob/master/packages/mock/src/MockList.ts#L4"},"packages/mock/src/MockList.ts:4")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"isrecord"},"isRecord"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("strong",{parentName:"p"},"isRecord"),"(",(0,l.kt)("inlineCode",{parentName:"p"},"obj"),"): obj is object"),(0,l.kt)("h4",{id:"parameters-5"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"obj")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"unknown"))))),(0,l.kt)("h4",{id:"returns-7"},"Returns"),(0,l.kt)("p",null,"obj is object"),(0,l.kt)("h4",{id:"defined-in-15"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/ardatan/graphql-tools/blob/master/packages/mock/src/types.ts#L205"},"packages/mock/src/types.ts:205")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"isref"},"isRef"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("strong",{parentName:"p"},"isRef"),"<","KeyT\\",">","(",(0,l.kt)("inlineCode",{parentName:"p"},"maybeRef"),"): maybeRef is Ref","<","KeyT\\",">"),(0,l.kt)("h4",{id:"type-parameters-4"},"Type parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"KeyT")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"KeyT"),": ",(0,l.kt)("a",{parentName:"td",href:"/docs/api/modules/mock#keytypeconstraints"},"KeyTypeConstraints")," = ",(0,l.kt)("inlineCode",{parentName:"td"},"string"))))),(0,l.kt)("h4",{id:"parameters-6"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"maybeRef")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"unknown"))))),(0,l.kt)("h4",{id:"returns-8"},"Returns"),(0,l.kt)("p",null,"maybeRef is Ref","<","KeyT\\",">"),(0,l.kt)("h4",{id:"defined-in-16"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/ardatan/graphql-tools/blob/master/packages/mock/src/types.ts#L192"},"packages/mock/src/types.ts:192")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"mockserver"},"mockServer"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("strong",{parentName:"p"},"mockServer"),"(",(0,l.kt)("inlineCode",{parentName:"p"},"schema"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"mocks"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"preserveResolvers?"),"): ",(0,l.kt)("a",{parentName:"p",href:"/docs/api/interfaces/mock_src.imockserver"},"IMockServer")),(0,l.kt)("p",null,"A convenience wrapper on top of addMocksToSchema. It adds your mock resolvers\nto your schema and returns a client that will correctly execute your query with\nvariables. Note: when executing queries from the returned server, context and\nroot will both equal ",(0,l.kt)("inlineCode",{parentName:"p"},"{}"),"."),(0,l.kt)("h4",{id:"parameters-7"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Default value"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"schema")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"GraphQLSchema")," ","|"," ",(0,l.kt)("a",{parentName:"td",href:"/docs/api/modules/utils#itypedefinitions"},"ITypeDefinitions")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"undefined")),(0,l.kt)("td",{parentName:"tr",align:"left"},"The schema to which to add mocks. This can also be a set of type definitions instead.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"mocks")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("a",{parentName:"td",href:"/docs/api/modules/mock#imocks"},"IMocks")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"undefined")),(0,l.kt)("td",{parentName:"tr",align:"left"},"The mocks to add to the schema.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"preserveResolvers")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"boolean")),(0,l.kt)("td",{parentName:"tr",align:"left"},"false"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Set to ",(0,l.kt)("inlineCode",{parentName:"td"},"true")," to prevent existing resolvers from being overwritten to provide mock data. This can be used to mock some parts of the server and not others.")))),(0,l.kt)("h4",{id:"returns-9"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"/docs/api/interfaces/mock_src.imockserver"},"IMockServer")),(0,l.kt)("h4",{id:"defined-in-17"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/ardatan/graphql-tools/blob/master/packages/mock/src/mockServer.ts#L19"},"packages/mock/src/mockServer.ts:19")))}m.isMDXComponent=!0}}]);