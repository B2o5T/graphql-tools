(self.webpackChunk_graphql_tools_website=self.webpackChunk_graphql_tools_website||[]).push([[4128],{5318:function(e,t,r){"use strict";r.d(t,{Zo:function(){return p},kt:function(){return d}});var n=r(7378);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var c=n.createContext({}),l=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},p=function(e){var t=l(e.components);return n.createElement(c.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=l(r),d=a,f=u["".concat(c,".").concat(d)]||u[d]||h[d]||o;return r?n.createElement(f,i(i({ref:t},p),{},{components:r})):n.createElement(f,i({ref:t},p))}));function d(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=u;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var l=2;l<o;l++)i[l]=r[l];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},1161:function(e,t,r){"use strict";r.r(t),r.d(t,{frontMatter:function(){return s},metadata:function(){return c},toc:function(){return l},default:function(){return h}});var n=r(9603),a=r(120),o=(r(7378),r(5318)),i=["components"],s={title:"Introduction",description:"A set of utilities to build your JavaScript GraphQL schema in a concise and powerful way."},c={unversionedId:"introduction",id:"introduction",isDocsHomePage:!1,title:"Introduction",description:"A set of utilities to build your JavaScript GraphQL schema in a concise and powerful way.",source:"@site/docs/introduction.md",sourceDirName:".",slug:"/introduction",permalink:"/docs/introduction",editUrl:"https://github.com/ardatan/graphql-tools/edit/master/website/docs/introduction.md",version:"current",frontMatter:{title:"Introduction",description:"A set of utilities to build your JavaScript GraphQL schema in a concise and powerful way."},sidebar:"someSidebar",next:{title:"Executable schemas",permalink:"/docs/generate-schema"}},l=[{value:"Using GraphQL with HTTP",id:"using-graphql-with-http",children:[]},{value:"The GraphQL-first philosophy",id:"the-graphql-first-philosophy",children:[]}],p={toc:l};function h(e){var t=e.components,r=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"GraphQL Tools is an npm package and an opinionated structure for how to build a GraphQL schema and resolvers in JavaScript, following the GraphQL-first development workflow."),(0,o.kt)("p",null,"Functions in the ",(0,o.kt)("inlineCode",{parentName:"p"},"graphql-tools")," packages are not just useful for building servers. They can also be used in the browser, for example to mock a backend during development or testing."),(0,o.kt)("p",null,"Even though we recommend a specific way of building GraphQL servers, you can use these tools even if you don't follow our structure; they work with any GraphQL-JS schema, and each tool can be useful on its own."),(0,o.kt)("h2",{id:"using-graphql-with-http"},"Using GraphQL with HTTP"),(0,o.kt)("p",null,"If you want to bind your JavaScript GraphQL schema to an HTTP server, you can use ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/graphql/express-graphql"},(0,o.kt)("inlineCode",{parentName:"a"},"express-graphql")),"."),(0,o.kt)("p",null,"You can develop your JavaScript based GraphQL API with ",(0,o.kt)("inlineCode",{parentName:"p"},"graphql-tools")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"express-graphql")," together: One to write the schema and resolver code, and the other to connect it to a web server."),(0,o.kt)("h2",{id:"the-graphql-first-philosophy"},"The GraphQL-first philosophy"),(0,o.kt)("p",null,"This package enables a specific workflow for developing a GraphQL server, where the GraphQL schema is the first thing you design, and acts as the contract between your frontend and backend. It's not necessarily for everyone, but it can be a great way to get a server up and running with a very clear separation of concerns. These concerns are aligned with Facebook's direction about the best way to use GraphQL, and our own findings after thinking about the best way to architect a JavaScript GraphQL API codebase."),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},"Use the GraphQL schema language.")," The ",(0,o.kt)("a",{parentName:"li",href:"http://graphql.org/learn/schema/"},"official GraphQL documentation")," explains schema concepts using a concise and easy to read language. The ",(0,o.kt)("a",{parentName:"li",href:"http://graphql.org/graphql-js/"},"getting started guide")," for GraphQL.js now uses the schema to introduce new developers to GraphQL. ",(0,o.kt)("inlineCode",{parentName:"li"},"graphql-tools")," enables you to use this language alongside with all of the features of GraphQL including resolvers, interfaces, custom scalars, and more, so that you can have a seamless flow from design to mocking to implementation. For a more complete overview of the benefits, check out Nick Nance's talk, ",(0,o.kt)("a",{parentName:"li",href:"https://www.youtube.com/watch?v=XOM8J4LaYFg"},"Managing GraphQL Development at Scale"),"."),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},"Separate business logic from the schema.")," As Dan Schafer covered in his talk, ",(0,o.kt)("a",{parentName:"li",href:"https://medium.com/apollo-stack/graphql-at-facebook-by-dan-schafer-38d65ef075af#.jduhdwudr"},"GraphQL at Facebook"),", it's a good idea to treat GraphQL as a thin API and routing layer. This means that your actual business logic, permissions, and other concerns should not be part of your GraphQL schema. For large apps, we suggest splitting your GraphQL server code into 4 components: Schema, Resolvers, Models, and Connectors, which each handle a specific part of the work."),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},"Use standard libraries for auth and other special concerns.")," There's no need to reinvent the login process in GraphQL. Every server framework already has a wealth of technologies for auth, file uploads, and more. It's prudent to use those standard solutions even if your data is being served through a GraphQL endpoint, and it is okay to have non-GraphQL endpoints on your server when it's the most practical solution.")))}h.isMDXComponent=!0}}]);