(self.webpackChunk_graphql_tools_website=self.webpackChunk_graphql_tools_website||[]).push([[1664],{5318:function(e,r,t){"use strict";t.d(r,{Zo:function(){return m},kt:function(){return f}});var n=t(7378);function a(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function o(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function i(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?o(Object(t),!0).forEach((function(r){a(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function c(e,r){if(null==e)return{};var t,n,a=function(e,r){if(null==e)return{};var t,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||(a[t]=e[t]);return a}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=n.createContext({}),l=function(e){var r=n.useContext(s),t=r;return e&&(t="function"==typeof e?e(r):i(i({},r),e)),t},m=function(e){var r=l(e.components);return n.createElement(s.Provider,{value:r},e.children)},u={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},p=n.forwardRef((function(e,r){var t=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,m=c(e,["components","mdxType","originalType","parentName"]),p=l(t),f=a,g=p["".concat(s,".").concat(f)]||p[f]||u[f]||o;return t?n.createElement(g,i(i({ref:r},m),{},{components:t})):n.createElement(g,i({ref:r},m))}));function f(e,r){var t=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=p;var c={};for(var s in r)hasOwnProperty.call(r,s)&&(c[s]=r[s]);c.originalType=e,c.mdxType="string"==typeof e?e:a,i[1]=c;for(var l=2;l<o;l++)i[l]=t[l];return n.createElement.apply(null,i)}return n.createElement.apply(null,t)}p.displayName="MDXCreateElement"},8119:function(e,r,t){"use strict";t.r(r),t.d(r,{frontMatter:function(){return c},metadata:function(){return s},toc:function(){return l},default:function(){return u}});var n=t(9603),a=t(120),o=(t(7378),t(5318)),i=["components"],c={id:"merge-schemas",title:"GraphQLSchema merging",sidebar_label:"GraphQLSchema merging"},s={unversionedId:"merge-schemas",id:"merge-schemas",isDocsHomePage:!1,title:"GraphQLSchema merging",description:"Schema merging (@graphql-tools/merge) combines the type definitions and resolvers from many local schema instances into a single executable schema. This is useful for building a local service schema from many individually-managed parts.",source:"@site/docs/merge-schemas.md",sourceDirName:".",slug:"/merge-schemas",permalink:"/docs/merge-schemas",editUrl:"https://github.com/ardatan/graphql-tools/edit/master/website/docs/merge-schemas.md",version:"current",sidebar_label:"GraphQLSchema merging",frontMatter:{id:"merge-schemas",title:"GraphQLSchema merging",sidebar_label:"GraphQLSchema merging"}},l=[],m={toc:l};function u(e){var r=e.components,t=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,n.Z)({},m,t,{components:r,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Schema merging (",(0,o.kt)("inlineCode",{parentName:"p"},"@graphql-tools/merge"),") combines the type definitions and resolvers from many local schema instances into a single executable schema. This is useful for building a local service schema from many individually-managed parts."),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"/docs/schema-merging"},"Learn more about schema merging")))}u.isMDXComponent=!0}}]);