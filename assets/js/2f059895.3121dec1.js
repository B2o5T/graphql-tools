(self.webpackChunk_graphql_tools_website=self.webpackChunk_graphql_tools_website||[]).push([[5655],{5318:function(e,t,a){"use strict";a.d(t,{Zo:function(){return m},kt:function(){return c}});var n=a(7378);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),p=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},m=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},k=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),k=p(a),c=r,u=k["".concat(s,".").concat(c)]||k[c]||d[c]||o;return a?n.createElement(u,i(i({ref:t},m),{},{components:a})):n.createElement(u,i({ref:t},m))}));function c(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,i=new Array(o);i[0]=k;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var p=2;p<o;p++)i[p]=a[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}k.displayName="MDXCreateElement"},4006:function(e,t,a){"use strict";a.r(t),a.d(t,{frontMatter:function(){return l},metadata:function(){return s},toc:function(){return p},default:function(){return d}});var n=a(9603),r=a(120),o=(a(7378),a(5318)),i=["components"],l={},s={unversionedId:"api/classes/mock_src.mockstore",id:"api/classes/mock_src.mockstore",isDocsHomePage:!1,title:"Class: MockStore",description:"mock/src.MockStore",source:"@site/docs/api/classes/mock_src.mockstore.md",sourceDirName:"api/classes",slug:"/api/classes/mock_src.mockstore",permalink:"/docs/api/classes/mock_src.mockstore",editUrl:"https://github.com/ardatan/graphql-tools/edit/master/website/docs/api/classes/mock_src.mockstore.md",version:"current",frontMatter:{},sidebar:"someSidebar",previous:{title:"Class: MockList",permalink:"/docs/api/classes/mock_src.mocklist"},next:{title:"Class: ModuleLoader",permalink:"/docs/api/classes/loaders_module_src.moduleloader"}},p=[{value:"Implements",id:"implements",children:[]},{value:"Table of contents",id:"table-of-contents",children:[{value:"Constructors",id:"constructors",children:[]},{value:"Properties",id:"properties",children:[]},{value:"Methods",id:"methods",children:[]}]},{value:"Constructors",id:"constructors-1",children:[{value:"constructor",id:"constructor",children:[]}]},{value:"Properties",id:"properties-1",children:[{value:"schema",id:"schema",children:[]}]},{value:"Methods",id:"methods-1",children:[{value:"get",id:"get",children:[]},{value:"reset",id:"reset",children:[]},{value:"set",id:"set",children:[]}]}],m={toc:p};function d(e){var t=e.components,a=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"../modules/mock_src"},"mock/src"),".MockStore"),(0,o.kt)("h2",{id:"implements"},"Implements"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/api/interfaces/mock_src.imockstore"},"IMockStore"))),(0,o.kt)("h2",{id:"table-of-contents"},"Table of contents"),(0,o.kt)("h3",{id:"constructors"},"Constructors"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/api/classes/mock_src.mockstore#constructor"},"constructor"))),(0,o.kt)("h3",{id:"properties"},"Properties"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/api/classes/mock_src.mockstore#schema"},"schema"))),(0,o.kt)("h3",{id:"methods"},"Methods"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/api/classes/mock_src.mockstore#get"},"get")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/api/classes/mock_src.mockstore#reset"},"reset")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/api/classes/mock_src.mockstore#set"},"set"))),(0,o.kt)("h2",{id:"constructors-1"},"Constructors"),(0,o.kt)("h3",{id:"constructor"},"constructor"),(0,o.kt)("p",null,"\u2022 ",(0,o.kt)("strong",{parentName:"p"},"new MockStore"),"(",(0,o.kt)("inlineCode",{parentName:"p"},"__namedParameters"),")"),(0,o.kt)("h4",{id:"parameters"},"Parameters"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,o.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("inlineCode",{parentName:"td"},"__namedParameters")),(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("inlineCode",{parentName:"td"},"Object"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("inlineCode",{parentName:"td"},"__namedParameters.mocks?")),(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("a",{parentName:"td",href:"/docs/api/modules/mock#imocks"},"IMocks"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("inlineCode",{parentName:"td"},"__namedParameters.schema")),(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("inlineCode",{parentName:"td"},"GraphQLSchema"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("inlineCode",{parentName:"td"},"__namedParameters.typePolicies?")),(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("inlineCode",{parentName:"td"},"Object"))))),(0,o.kt)("h4",{id:"defined-in"},"Defined in"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/ardatan/graphql-tools/blob/master/packages/mock/src/MockStore.ts#L54"},"packages/mock/src/MockStore.ts:54")),(0,o.kt)("h2",{id:"properties-1"},"Properties"),(0,o.kt)("h3",{id:"schema"},"schema"),(0,o.kt)("p",null,"\u2022 ",(0,o.kt)("strong",{parentName:"p"},"schema"),": ",(0,o.kt)("inlineCode",{parentName:"p"},"GraphQLSchema")),(0,o.kt)("h4",{id:"implementation-of"},"Implementation of"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"/docs/api/interfaces/mock_src.imockstore"},"IMockStore"),".",(0,o.kt)("a",{parentName:"p",href:"/docs/api/interfaces/mock_src.imockstore.md#schema"},"schema")),(0,o.kt)("h4",{id:"defined-in-1"},"Defined in"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/ardatan/graphql-tools/blob/master/packages/mock/src/MockStore.ts#L48"},"packages/mock/src/MockStore.ts:48")),(0,o.kt)("h2",{id:"methods-1"},"Methods"),(0,o.kt)("h3",{id:"get"},"get"),(0,o.kt)("p",null,"\u25b8 ",(0,o.kt)("strong",{parentName:"p"},"get"),"<","KeyT, ReturnKeyT\\",">","(",(0,o.kt)("inlineCode",{parentName:"p"},"_typeName"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"_key?"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"_fieldName?"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"_fieldArgs?"),"): ",(0,o.kt)("inlineCode",{parentName:"p"},"unknown")),(0,o.kt)("p",null,"Get a field value from the store for the given type, key and field\nname \u2014 and optionally field arguments. If the field name is not given,\na reference to the type will be returned."),(0,o.kt)("p",null,"If the the value for this field is not set, a value will be\ngenerated according to field return type and mock functions."),(0,o.kt)("p",null,"If the field's output type is a ",(0,o.kt)("inlineCode",{parentName:"p"},"ObjectType")," (or list of ",(0,o.kt)("inlineCode",{parentName:"p"},"ObjectType"),"),\nit will return a ",(0,o.kt)("inlineCode",{parentName:"p"},"Ref")," (or array of ",(0,o.kt)("inlineCode",{parentName:"p"},"Ref"),"), ie a reference to an entity\nin the store."),(0,o.kt)("p",null,"Example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"store.get('Query', 'ROOT', 'viewer');\n&gt; { $ref: { key: 'abc-737dh-djdjd', typeName: 'User' } }\nstore.get('User', 'abc-737dh-djdjd', 'name')\n&gt; \"Hello World\"\n")),(0,o.kt)("h4",{id:"type-parameters"},"Type parameters"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,o.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("inlineCode",{parentName:"td"},"KeyT")),(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("inlineCode",{parentName:"td"},"KeyT"),": ",(0,o.kt)("a",{parentName:"td",href:"/docs/api/modules/mock#keytypeconstraints"},"KeyTypeConstraints")," = ",(0,o.kt)("inlineCode",{parentName:"td"},"string"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("inlineCode",{parentName:"td"},"ReturnKeyT")),(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("inlineCode",{parentName:"td"},"ReturnKeyT"),": ",(0,o.kt)("a",{parentName:"td",href:"/docs/api/modules/mock#keytypeconstraints"},"KeyTypeConstraints")," = ",(0,o.kt)("inlineCode",{parentName:"td"},"string"))))),(0,o.kt)("h4",{id:"parameters-1"},"Parameters"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,o.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("inlineCode",{parentName:"td"},"_typeName")),(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("inlineCode",{parentName:"td"},"string")," ","|"," ",(0,o.kt)("a",{parentName:"td",href:"/docs/api/modules/mock#ref"},"Ref"),"<","KeyT\\",">"," ","|"," ",(0,o.kt)("a",{parentName:"td",href:"/docs/api/modules/mock#getargs"},"GetArgs"),"<","KeyT\\",">")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("inlineCode",{parentName:"td"},"_key?")),(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("inlineCode",{parentName:"td"},"string")," ","|"," ",(0,o.kt)("inlineCode",{parentName:"td"},"string"),"[] ","|"," ",(0,o.kt)("inlineCode",{parentName:"td"},"KeyT")," ","|"," { ","[fieldName: string]",": ",(0,o.kt)("inlineCode",{parentName:"td"},"any"),";  }")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("inlineCode",{parentName:"td"},"_fieldName?")),(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("inlineCode",{parentName:"td"},"string")," ","|"," ",(0,o.kt)("inlineCode",{parentName:"td"},"string"),"[] ","|"," { ","[fieldName: string]",": ",(0,o.kt)("inlineCode",{parentName:"td"},"any"),";  } ","|"," { ","[argName: string]",": ",(0,o.kt)("inlineCode",{parentName:"td"},"any"),";  }")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("inlineCode",{parentName:"td"},"_fieldArgs?")),(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("inlineCode",{parentName:"td"},"string")," ","|"," { ","[argName: string]",": ",(0,o.kt)("inlineCode",{parentName:"td"},"any"),";  }")))),(0,o.kt)("h4",{id:"returns"},"Returns"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"unknown")),(0,o.kt)("h4",{id:"implementation-of-1"},"Implementation of"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"/docs/api/interfaces/mock_src.imockstore"},"IMockStore"),".",(0,o.kt)("a",{parentName:"p",href:"/docs/api/interfaces/mock_src.imockstore.md#get"},"get")),(0,o.kt)("h4",{id:"defined-in-2"},"Defined in"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/ardatan/graphql-tools/blob/master/packages/mock/src/MockStore.ts#L72"},"packages/mock/src/MockStore.ts:72")),(0,o.kt)("hr",null),(0,o.kt)("h3",{id:"reset"},"reset"),(0,o.kt)("p",null,"\u25b8 ",(0,o.kt)("strong",{parentName:"p"},"reset"),"(): ",(0,o.kt)("inlineCode",{parentName:"p"},"void")),(0,o.kt)("p",null,"Resets the mock store"),(0,o.kt)("h4",{id:"returns-1"},"Returns"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"void")),(0,o.kt)("h4",{id:"implementation-of-2"},"Implementation of"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"/docs/api/interfaces/mock_src.imockstore"},"IMockStore"),".",(0,o.kt)("a",{parentName:"p",href:"/docs/api/interfaces/mock_src.imockstore.md#reset"},"reset")),(0,o.kt)("h4",{id:"defined-in-3"},"Defined in"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/ardatan/graphql-tools/blob/master/packages/mock/src/MockStore.ts#L180"},"packages/mock/src/MockStore.ts:180")),(0,o.kt)("hr",null),(0,o.kt)("h3",{id:"set"},"set"),(0,o.kt)("p",null,"\u25b8 ",(0,o.kt)("strong",{parentName:"p"},"set"),"<","KeyT\\",">","(",(0,o.kt)("inlineCode",{parentName:"p"},"_typeName"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"_key?"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"_fieldName?"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"_value?"),"): ",(0,o.kt)("inlineCode",{parentName:"p"},"void")),(0,o.kt)("p",null,"Set a field value in the store for the given type, key and field\nname \u2014 and optionally field arguments."),(0,o.kt)("p",null,"If the the field return type is an ",(0,o.kt)("inlineCode",{parentName:"p"},"ObjectType")," or a list of\n",(0,o.kt)("inlineCode",{parentName:"p"},"ObjectType"),", you can set references to other entity as value:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"// set the viewer name\nstore.set('User', 1, 'name', 'Alexandre);\nstore.set('Query', 'ROOT', 'viewer', store.get('User', 1));\n\n// set the friends of viewer\nstore.set('User', 2, 'name', 'Emily');\nstore.set('User', 3, 'name', 'Caroline');\nstore.set('User', 1, 'friends', [store.get('User', 2), store.get('User', 3)]);\n")),(0,o.kt)("p",null,"But it also supports nested set:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"store.set('Query', 'ROOT', 'viewer', {\n name: 'Alexandre',\n friends: [\n   { name: 'Emily' }\n   { name: 'Caroline }\n ]\n});\n")),(0,o.kt)("h4",{id:"type-parameters-1"},"Type parameters"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,o.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("inlineCode",{parentName:"td"},"KeyT")),(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("inlineCode",{parentName:"td"},"KeyT"),": ",(0,o.kt)("a",{parentName:"td",href:"/docs/api/modules/mock#keytypeconstraints"},"KeyTypeConstraints"))))),(0,o.kt)("h4",{id:"parameters-2"},"Parameters"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,o.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("inlineCode",{parentName:"td"},"_typeName")),(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("inlineCode",{parentName:"td"},"string")," ","|"," ",(0,o.kt)("a",{parentName:"td",href:"/docs/api/modules/mock#ref"},"Ref"),"<","KeyT\\",">"," ","|"," ",(0,o.kt)("a",{parentName:"td",href:"/docs/api/modules/mock#setargs"},"SetArgs"),"<","KeyT\\",">")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("inlineCode",{parentName:"td"},"_key?")),(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("inlineCode",{parentName:"td"},"string")," ","|"," ",(0,o.kt)("inlineCode",{parentName:"td"},"KeyT")," ","|"," { ","[fieldName: string]",": ",(0,o.kt)("inlineCode",{parentName:"td"},"any"),";  }")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("inlineCode",{parentName:"td"},"_fieldName?")),(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("inlineCode",{parentName:"td"},"unknown"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("inlineCode",{parentName:"td"},"_value?")),(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("inlineCode",{parentName:"td"},"unknown"))))),(0,o.kt)("h4",{id:"returns-2"},"Returns"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"void")),(0,o.kt)("h4",{id:"implementation-of-3"},"Implementation of"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"/docs/api/interfaces/mock_src.imockstore"},"IMockStore"),".",(0,o.kt)("a",{parentName:"p",href:"/docs/api/interfaces/mock_src.imockstore.md#set"},"set")),(0,o.kt)("h4",{id:"defined-in-4"},"Defined in"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/ardatan/graphql-tools/blob/master/packages/mock/src/MockStore.ts#L134"},"packages/mock/src/MockStore.ts:134")))}d.isMDXComponent=!0}}]);