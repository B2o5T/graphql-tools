(self.webpackChunk_graphql_tools_website=self.webpackChunk_graphql_tools_website||[]).push([[5935],{5318:function(e,o,a){"use strict";a.d(o,{Zo:function(){return c},kt:function(){return u}});var r=a(7378);function n(e,o,a){return o in e?Object.defineProperty(e,o,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[o]=a,e}function t(e,o){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);o&&(r=r.filter((function(o){return Object.getOwnPropertyDescriptor(e,o).enumerable}))),a.push.apply(a,r)}return a}function l(e){for(var o=1;o<arguments.length;o++){var a=null!=arguments[o]?arguments[o]:{};o%2?t(Object(a),!0).forEach((function(o){n(e,o,a[o])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):t(Object(a)).forEach((function(o){Object.defineProperty(e,o,Object.getOwnPropertyDescriptor(a,o))}))}return e}function s(e,o){if(null==e)return{};var a,r,n=function(e,o){if(null==e)return{};var a,r,n={},t=Object.keys(e);for(r=0;r<t.length;r++)a=t[r],o.indexOf(a)>=0||(n[a]=e[a]);return n}(e,o);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);for(r=0;r<t.length;r++)a=t[r],o.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var p=r.createContext({}),i=function(e){var o=r.useContext(p),a=o;return e&&(a="function"==typeof e?e(o):l(l({},o),e)),a},c=function(e){var o=i(e.components);return r.createElement(p.Provider,{value:o},e.children)},d={inlineCode:"code",wrapper:function(e){var o=e.children;return r.createElement(r.Fragment,{},o)}},m=r.forwardRef((function(e,o){var a=e.components,n=e.mdxType,t=e.originalType,p=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),m=i(a),u=n,h=m["".concat(p,".").concat(u)]||m[u]||d[u]||t;return a?r.createElement(h,l(l({ref:o},c),{},{components:a})):r.createElement(h,l({ref:o},c))}));function u(e,o){var a=arguments,n=o&&o.mdxType;if("string"==typeof e||n){var t=a.length,l=new Array(t);l[0]=m;var s={};for(var p in o)hasOwnProperty.call(o,p)&&(s[p]=o[p]);s.originalType=e,s.mdxType="string"==typeof e?e:n,l[1]=s;for(var i=2;i<t;i++)l[i]=a[i];return r.createElement.apply(null,l)}return r.createElement.apply(null,a)}m.displayName="MDXCreateElement"},6962:function(e,o,a){"use strict";a.r(o),a.d(o,{frontMatter:function(){return s},metadata:function(){return p},toc:function(){return i},default:function(){return d}});var r=a(9603),n=a(120),t=(a(7378),a(5318)),l=["components"],s={id:"loaders",title:"Loaders",sidebar_label:"Loaders"},p={unversionedId:"loaders",id:"loaders",isDocsHomePage:!1,title:"Loaders",description:"There are a lot of loaders that load your schemas and documents from different sources. You need to provide those loaders under loaders parameter like below;",source:"@site/docs/loaders.md",sourceDirName:".",slug:"/loaders",permalink:"/docs/loaders",editUrl:"https://github.com/ardatan/graphql-tools/edit/master/website/docs/loaders.md",version:"current",sidebar_label:"Loaders",frontMatter:{id:"loaders",title:"Loaders",sidebar_label:"Loaders"}},i=[{value:"GraphQL File Loader",id:"graphql-file-loader",children:[]},{value:"JSON File Loader",id:"json-file-loader",children:[]},{value:"Code File Loader",id:"code-file-loader",children:[]},{value:"URL Loader",id:"url-loader",children:[]}],c={toc:i};function d(e){var o=e.components,a=(0,n.Z)(e,l);return(0,t.kt)("wrapper",(0,r.Z)({},c,a,{components:o,mdxType:"MDXLayout"}),(0,t.kt)("p",null,"There are a lot of loaders that load your schemas and documents from different sources. You need to provide those loaders under ",(0,t.kt)("inlineCode",{parentName:"p"},"loaders")," parameter like below;"),(0,t.kt)("h3",{id:"graphql-file-loader"},"GraphQL File Loader"),(0,t.kt)("p",null,"This loader loads your GraphQLSchema from ",(0,t.kt)("inlineCode",{parentName:"p"},".graphql")," files like below;"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-ts"},"import { GraphQLFileLoader } from '@graphql-tools/graphql-file-loader';\nimport { addResolversToSchema } from '@graphql-tools/schema';\nimport { loadSchema } from '@graphql-tools/load';\n\n// schema is `GraphQLSchema` instance\nconst schema = await loadSchema('schema.graphql', {  // load from a single schema file\n    loaders: [\n        new GraphQLFileLoader()\n    ]\n});\n\n// You can add resolvers to that schema\nconst schemaWithResolvers = addResolversToSchema({\n  schema,\n  resolvers: {\n    Query: {...}\n  }\n});\n")),(0,t.kt)("p",null,"This loader also supports glob pattern;"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-ts"},"import { GraphQLFileLoader } from '@graphql-tools/graphql-file-loader';\nimport { loadSchema } from '@graphql-tools/load';\n\nconst schema = await loadSchema('graphql/**/*.graphql', {\n  // load files and merge them into a single schema object\n  loaders: [new GraphQLFileLoader()],\n});\n")),(0,t.kt)("p",null,"If you use ",(0,t.kt)("inlineCode",{parentName:"p"},"loadDocuments"),", it gives you an array of document source objects;"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-ts"},"import { loadDocuments } from '@graphql-tools/load';\nimport { GraphQLFileLoader } from '@graphql-tools/graphql-file-loader';\n\nconst documents = await loadDocuments('graphql/**/*.graphql', {\n  // load files and merge them into a single schema object\n  loaders: [new GraphQLFileLoader()],\n});\n")),(0,t.kt)("blockquote",null,(0,t.kt)("p",{parentName:"blockquote"},"This loader only supports Node environment because it relies on File System of your platform.")),(0,t.kt)("h3",{id:"json-file-loader"},"JSON File Loader"),(0,t.kt)("p",null,"This loader handles schema introspection and document nodes in ",(0,t.kt)("inlineCode",{parentName:"p"},".json")," files."),(0,t.kt)("p",null,"Introspection is handled in the example below;"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-ts"},"import { loadSchema } from '@graphql-tools/load';\nimport { JsonFileLoader } from '@graphql-tools/json-file-loader';\nimport { addMocksToSchema } from '@graphql-tools/mock';\n\nconst schema = await loadSchema('schema-introspection.json', {\n  loaders: [new JsonFileLoader()],\n});\n\n// Mocked non-executable schema generated from an introspection\nconst mockedSchema = addMocksToSchema({ schema });\n")),(0,t.kt)("p",null,"This loader handles ",(0,t.kt)("inlineCode",{parentName:"p"},"json")," files if they represent ",(0,t.kt)("inlineCode",{parentName:"p"},"DocumentNode"),", and returns an array of document sources."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-ts"},"import { loadDocuments } from '@graphql-tools/load';\nimport { JsonFileLoader } from '@graphql-tools/json-file-loader';\n\nconst documents = await loadDocuments('**/*-document.json', {\n  loaders: [new JsonFileLoader()],\n});\n")),(0,t.kt)("blockquote",null,(0,t.kt)("p",{parentName:"blockquote"},"This loader only supports Node environment because it relies on File System of your platform.")),(0,t.kt)("h3",{id:"code-file-loader"},"Code File Loader"),(0,t.kt)("p",null,"This loader extracts GraphQL SDL string, exported ",(0,t.kt)("inlineCode",{parentName:"p"},"GraphQLSchema")," and ",(0,t.kt)("inlineCode",{parentName:"p"},"DocumentNode")," from TypeScript and JavaScript code files.\nLet's say you have the following code file;"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-ts"},"const ME_QUERY = gql`\n  query Me {\n    me {\n      id\n      name\n      username\n      age\n    }\n  }\n`;\n")),(0,t.kt)("p",null,"And the following code will extract ",(0,t.kt)("inlineCode",{parentName:"p"},"Me")," query operation from that code file without executing it using ",(0,t.kt)("a",{parentName:"p",href:"/docs/graphql-tag-pluck"},"GraphQL Tag Pluck"),". It understands ",(0,t.kt)("inlineCode",{parentName:"p"},"/* GraphQL */")," magic comment and ",(0,t.kt)("inlineCode",{parentName:"p"},"gql")," literals. You can configure ",(0,t.kt)("a",{parentName:"p",href:"/docs/graphql-tag-pluck"},"GraphQL Tag Pluck")," using ",(0,t.kt)("inlineCode",{parentName:"p"},"pluckConfig"),"."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-ts"},"import { loadDocuments } from '@graphql-tools/load';\nimport { CodeFileLoader } from '@graphql-tools/code-file-loader';\n\nconst documents = await loadDocuments('./src/**/graphql/*.ts', {\n  loaders:[\n    new CodeFileLoader()\n  ],\n  pluckConfig: {\n    ...\n  }\n})\n")),(0,t.kt)("p",null,"You can also load your schema from code files like below;"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-ts"},"import { GraphQLSchema } from 'graphql';\n\n// typeDefs.ts\nexport const typeDefs = /* GraphQL */`\n  type Query {\n    foo: String\n  }\n`\n// or schema.ts\nexport const schema = new GraphQLSchema(...);\n")),(0,t.kt)("blockquote",null,(0,t.kt)("p",{parentName:"blockquote"},"This loader only supports Node environment because it relies on File System of your platform.")),(0,t.kt)("p",null,(0,t.kt)("strong",{parentName:"p"},"NOTE:")," If you are using typescript and ",(0,t.kt)("a",{parentName:"p",href:"https://www.typescriptlang.org/tsconfig#paths"},"path aliases"),", you may also need ",(0,t.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/tsconfig-paths"},"tsconfig-paths"),". Further reading can be found at the ",(0,t.kt)("a",{parentName:"p",href:"https://github.com/ardatan/graphql-tools/issues/1544"},"GitHub issue.")),(0,t.kt)("h3",{id:"url-loader"},"URL Loader"),(0,t.kt)("p",null,"This loader generates ",(0,t.kt)("a",{parentName:"p",href:"/docs/remote-schemas"},"(a fully executable remote schema using @graphql-tools/wrap)")," from a URL endpoint."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-ts"},"import { loadSchema } from '@graphql-tools/load';\nimport { UrlLoader } from '@graphql-tools/url-loader';\n\nconst schema = await loadSchema('http://localhost:3000/graphql', {\n  loaders: [new UrlLoader()],\n});\n")),(0,t.kt)("p",null,"You can provide custom headers, HTTP method and custom W3C fetch method."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-ts"},"import { loadSchema } from '@graphql-tools/load';\nimport { UrlLoader } from '@graphql-tools/url-loader';\n\nconst schema = await loadSchema('http://localhost:3000/graphql', {\n  loaders: [new UrlLoader()],\n  headers: {\n    Accept: 'application/json',\n  },\n  method: 'POST',\n  fetch: myFetch,\n});\n")),(0,t.kt)("blockquote",null,(0,t.kt)("p",{parentName:"blockquote"},"This loader supports both browser and node environments.")),(0,t.kt)("p",null,"In browser this remote schema can be called using vanilla GraphQL-js and act like a simple GraphQL client."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-ts"},"import { loadSchema } from '@graphql-tools/load';\nimport { UrlLoader } from '@graphql-tools/url-loader';\nimport { graphql } from 'graphql';\n\nconst schema = await loadSchema('http://localhost:3000/graphql', {\n  loaders: [new UrlLoader()],\n});\n\nconst response = await graphql(\n  schema,\n  /* GraphQL */ `\n    {\n      foo {\n        bar {\n          baz\n        }\n      }\n    }\n  `\n);\n\nconsole.log(response);\n")))}d.isMDXComponent=!0}}]);