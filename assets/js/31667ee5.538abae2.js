(self.webpackChunk_graphql_tools_website=self.webpackChunk_graphql_tools_website||[]).push([[5784],{5318:function(e,r,t){"use strict";t.d(r,{Zo:function(){return p},kt:function(){return v}});var n=t(7378);function o(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function i(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function a(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?i(Object(t),!0).forEach((function(r){o(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function s(e,r){if(null==e)return{};var t,n,o=function(e,r){if(null==e)return{};var t,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||(o[t]=e[t]);return o}(e,r);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=n.createContext({}),l=function(e){var r=n.useContext(c),t=r;return e&&(t="function"==typeof e?e(r):a(a({},r),e)),t},p=function(e){var r=l(e.components);return n.createElement(c.Provider,{value:r},e.children)},u={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},m=n.forwardRef((function(e,r){var t=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=l(t),v=o,d=m["".concat(c,".").concat(v)]||m[v]||u[v]||i;return t?n.createElement(d,a(a({ref:r},p),{},{components:t})):n.createElement(d,a({ref:r},p))}));function v(e,r){var t=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var i=t.length,a=new Array(i);a[0]=m;var s={};for(var c in r)hasOwnProperty.call(r,c)&&(s[c]=r[c]);s.originalType=e,s.mdxType="string"==typeof e?e:o,a[1]=s;for(var l=2;l<i;l++)a[l]=t[l];return n.createElement.apply(null,a)}return n.createElement.apply(null,t)}m.displayName="MDXCreateElement"},3518:function(e,r,t){"use strict";t.r(r),t.d(r,{frontMatter:function(){return s},metadata:function(){return c},toc:function(){return l},default:function(){return u}});var n=t(9603),o=t(120),i=(t(7378),t(5318)),a=["components"],s={id:"directive-resolvers",title:"Directive resolvers",description:"A set of utilities to build your JavaScript GraphQL schema in a concise and powerful way."},c={unversionedId:"directive-resolvers",id:"directive-resolvers",isDocsHomePage:!1,title:"Directive resolvers",description:"A set of utilities to build your JavaScript GraphQL schema in a concise and powerful way.",source:"@site/docs/directive-resolvers.md",sourceDirName:".",slug:"/directive-resolvers",permalink:"/docs/directive-resolvers",editUrl:"https://github.com/ardatan/graphql-tools/edit/master/website/docs/directive-resolvers.md",version:"current",frontMatter:{id:"directive-resolvers",title:"Directive resolvers",description:"A set of utilities to build your JavaScript GraphQL schema in a concise and powerful way."},sidebar:"someSidebar",previous:{title:"Schema directives",permalink:"/docs/schema-directives"},next:{title:"Schema delegation",permalink:"/docs/schema-delegation"}},l=[{value:"Directive example",id:"directive-example",children:[]},{value:"Multi-Directives example",id:"multi-directives-example",children:[]},{value:"API",id:"api",children:[{value:"directiveResolvers option",id:"directiveresolvers-option",children:[]},{value:"attachDirectiveResolvers",id:"attachdirectiveresolvers",children:[]}]}],p={toc:l};function u(e){var r=e.components,t=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,n.Z)({},p,t,{components:r,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"directive-example"},"Directive example"),(0,i.kt)("p",null,"Let's take a look at how we can create ",(0,i.kt)("inlineCode",{parentName:"p"},"@upper")," Directive to upper-case a string returned from resolve on Field"),(0,i.kt)("p",null,"To start, let's grab the schema definition string from the ",(0,i.kt)("inlineCode",{parentName:"p"},"makeExecutableSchema")," example ",(0,i.kt)("a",{parentName:"p",href:"/docs/generate-schema/#example"},'in the "Generating a schema" article'),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"import { makeExecutableSchema } from '@graphql-tools/schema';\nimport { graphql } from 'graphql';\n\n// Construct a schema, using GraphQL schema language\nconst typeDefs = `\n  directive @upper on FIELD_DEFINITION\n\n  type Query {\n    hello: String @upper\n  }\n`;\n\n// Implement resolvers for out custom Directive\nconst directiveResolvers = {\n  upper(\n    next,\n    src,\n    args,\n    context,\n  ) {\n    return next().then((str) => {\n      if (typeof(str) === 'string') {\n        return str.toUpperCase();\n      }\n      return str;\n    });\n  },\n}\n\n// Provide resolver functions for your schema fields\nconst resolvers = {\n  Query: {\n    hello: (root, args, context) => {\n      return 'Hello world!';\n    },\n  },\n};\n\nexport const schema = makeExecutableSchema({\n  typeDefs,\n  resolvers,\n  directiveResolvers,\n});\n\nconst query = `\nquery UPPER_HELLO {\n  hello\n}\n`;\n\ngraphql(schema, query).then((result) => console.log('Got result', result));\n")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Note: next() always return a Promise for consistency, resolved with original resolver value or rejected with an error.")),(0,i.kt)("h2",{id:"multi-directives-example"},"Multi-Directives example"),(0,i.kt)("p",null,"Multi-Directives on a field will be apply with LTR order."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"// graphql-tools combines a schema string with resolvers.\nimport { makeExecutableSchema } from '@graphql-tools/schema';\n\n// Construct a schema, using GraphQL schema language\nconst typeDefs = `\n  directive @upper on FIELD_DEFINITION\n  directive @concat(value: String!) on FIELD_DEFINITION\n\n  type Query {\n    foo: String @concat(value: \"@gmail.com\") @upper\n  }\n`;\n\n// Customs directives, check https://github.com/ardatan/graphql-tools/pull/518\n// for more examples\nconst directiveResolvers = {\n  upper(\n    next,\n    src,\n    args,\n    context,\n  ) {\n    return next().then((str) => {\n      if (typeof(str) === 'string') {\n        return str.toUpperCase();\n      }\n      return str;\n    });\n  },\n  concat(\n    next,\n    src,\n    args,\n    context,\n  ) {\n    return next().then((str) => {\n      if (typeof(str) !== 'undefined') {\n        return `${str}${args.value}`;\n      }\n      return str;\n    });\n  },\n}\n\n// Provide resolver functions for your schema fields\nconst resolvers = {\n  Query: {\n    foo: (root, args, context) => {\n      return 'foo';\n    },\n  },\n};\n\n// Required: Export the GraphQL.js schema object as \"schema\"\nexport const schema = makeExecutableSchema({\n  typeDefs,\n  resolvers,\n  directiveResolvers,\n});\n")),(0,i.kt)("p",null,"The result with query ",(0,i.kt)("inlineCode",{parentName:"p"},"{foo}")," will be:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "foo": "FOO@GMAIL.COM"\n  }\n}\n')),(0,i.kt)("h2",{id:"api"},"API"),(0,i.kt)("h3",{id:"directiveresolvers-option"},"directiveResolvers option"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"import { makeExecutableSchema } from '@graphql-tools/schema';\n\nconst directiveResolvers = {\n  // directive resolvers implement\n};\n\nconst schema = makeExecutableSchema({\n  // ... other options\n  directiveResolvers,\n})\n")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"makeExecutableSchema")," has new option field is ",(0,i.kt)("inlineCode",{parentName:"p"},"directiveResolvers"),", a map object for custom Directive's resolvers."),(0,i.kt)("h3",{id:"attachdirectiveresolvers"},"attachDirectiveResolvers"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"import { attachDirectiveResolvers } from '@graphql-tools/schema';\n\nconst directiveResolvers = {\n  // directive resolvers implement\n};\n\nschemaWithDirectiveResolvers = attachDirectiveResolvers(\n  schema,\n  directiveResolvers,\n);\n")),(0,i.kt)("p",null,"Given an instance of GraphQLSchema and a ",(0,i.kt)("inlineCode",{parentName:"p"},"directiveResolvers")," map object, ",(0,i.kt)("inlineCode",{parentName:"p"},"attachDirectiveResolvers")," returns a new schema in which all fields' resolver have been wrapped with directive resolvers."))}u.isMDXComponent=!0}}]);